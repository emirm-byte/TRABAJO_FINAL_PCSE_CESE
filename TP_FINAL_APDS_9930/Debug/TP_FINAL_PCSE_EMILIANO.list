
TP_FINAL_PCSE_EMILIANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004f94  08004f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005030  08005030  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005038  08005038  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000cc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc7e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a67  00000000  00000000  0002bd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002d788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009a0  00000000  00000000  0002e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cbf  00000000  00000000  0002eb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d03b  00000000  00000000  00051827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d295a  00000000  00000000  0005e862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001311bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ed0  00000000  00000000  0013120c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f7c 	.word	0x08004f7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004f7c 	.word	0x08004f7c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd6:	f001 f85b 	bl	8001e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dda:	f000 f891 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dde:	f000 f923 	bl	8001028 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000de2:	f000 f8f7 	bl	8000fd4 <MX_USART3_UART_Init>
  //MX_I2C2_Init();
  /* USER CODE BEGIN 2 */

  I2C_APDS_Init();              //INICIO EL PUERTO I2C//
 8000de6:	f000 ffcb 	bl	8001d80 <I2C_APDS_Init>

  /* USER CODE END 2 */

  char buffer[20]={0};
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]

  float luz_ambiente = 0;
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
  uint16_t proximidad = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	80fb      	strh	r3, [r7, #6]
  uint16_t ch0,ch1;

   APDS9930_Init();
 8000e06:	f000 fba4 	bl	8001552 <APDS9930_Init>

   lightSensorOn();
 8000e0a:	f000 fc36 	bl	800167a <lightSensorOn>
   proximitySensorOn();
 8000e0e:	f000 fc5a 	bl	80016c6 <proximitySensorOn>

   uint16_t registro=0;;
 8000e12:	2300      	movs	r3, #0
 8000e14:	803b      	strh	r3, [r7, #0]
   APDS9930_ReadByte(SENSOR_ENABLE, &registro);
 8000e16:	463b      	mov	r3, r7
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 ff55 	bl	8001cca <APDS9930_ReadByte>
   sprintf(buffer, "REG_ENA=%ld \n\r",(uint16_t)registro);
 8000e20:	883b      	ldrh	r3, [r7, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4930      	ldr	r1, [pc, #192]	; (8000eec <main+0x11c>)
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 fc38 	bl	80046a0 <siprintf>
   uartSendString((uint8_t *)buffer);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fa15 	bl	8001264 <uartSendString>
  while (1)
  {
    /* USER CODE END WHILE */


	 ch0=0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	80bb      	strh	r3, [r7, #4]
	 readCh0Light(&ch0);
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fe3d 	bl	8001ac0 <readCh0Light>
	 sprintf(buffer, "ch0=%ld \n\r",(uint16_t)ch0);
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	4928      	ldr	r1, [pc, #160]	; (8000ef0 <main+0x120>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 fc25 	bl	80046a0 <siprintf>
	 uartSendString((uint8_t *)buffer);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fa02 	bl	8001264 <uartSendString>

	 ch1=0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	807b      	strh	r3, [r7, #2]
	 readCh1Light(&ch1);
 8000e64:	1cbb      	adds	r3, r7, #2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fe3f 	bl	8001aea <readCh1Light>
	 sprintf(buffer, "ch1=%ld \n\r",(uint16_t)ch1);
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	491f      	ldr	r1, [pc, #124]	; (8000ef4 <main+0x124>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 fc12 	bl	80046a0 <siprintf>
	 uartSendString((uint8_t *)buffer);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f9ef 	bl	8001264 <uartSendString>

	 luz_ambiente=0;
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
	 readAmbientLight(&luz_ambiente);
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fe41 	bl	8001b18 <readAmbientLight>
	 sprintf(buffer, "Luz Ambiente=%ld \n\r",(uint16_t)luz_ambiente);
 8000e96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e9e:	ee17 3a90 	vmov	r3, s15
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4913      	ldr	r1, [pc, #76]	; (8000ef8 <main+0x128>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 fbf7 	bl	80046a0 <siprintf>
	 uartSendString((uint8_t *)buffer);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f9d4 	bl	8001264 <uartSendString>


	 proximidad =0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	80fb      	strh	r3, [r7, #6]
	 readProximity(&proximidad);
 8000ec0:	1dbb      	adds	r3, r7, #6
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 feec 	bl	8001ca0 <readProximity>
	 sprintf(buffer, "Proximidad=%ld \n\r",(uint16_t)proximidad);
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	490a      	ldr	r1, [pc, #40]	; (8000efc <main+0x12c>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 fbe4 	bl	80046a0 <siprintf>
	 uartSendString((uint8_t *)buffer);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f9c1 	bl	8001264 <uartSendString>

	 HAL_Delay(2000);
 8000ee2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ee6:	f001 f845 	bl	8001f74 <HAL_Delay>
	 ch0=0;
 8000eea:	e7a6      	b.n	8000e3a <main+0x6a>
 8000eec:	08004f94 	.word	0x08004f94
 8000ef0:	08004fa4 	.word	0x08004fa4
 8000ef4:	08004fb0 	.word	0x08004fb0
 8000ef8:	08004fbc 	.word	0x08004fbc
 8000efc:	08004fd0 	.word	0x08004fd0

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fbbe 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	2302      	movs	r3, #2
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f70:	2304      	movs	r3, #4
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f74:	23a8      	movs	r3, #168	; 0xa8
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 0320 	add.w	r3, r7, #32
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 faff 	bl	8003588 <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f90:	f000 f986 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000faa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2105      	movs	r1, #5
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fd60 	bl	8003a78 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fbe:	f000 f96f 	bl	80012a0 <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	; 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_USART3_UART_Init+0x4c>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <MX_USART3_UART_Init+0x50>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_USART3_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USART3_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_USART3_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USART3_UART_Init+0x4c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_USART3_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USART3_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USART3_UART_Init+0x4c>)
 800100c:	f002 ff54 	bl	8003eb8 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001016:	f000 f943 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000008c 	.word	0x2000008c
 8001024:	40004800 	.word	0x40004800

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	4b83      	ldr	r3, [pc, #524]	; (8001250 <MX_GPIO_Init+0x228>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a82      	ldr	r2, [pc, #520]	; (8001250 <MX_GPIO_Init+0x228>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b80      	ldr	r3, [pc, #512]	; (8001250 <MX_GPIO_Init+0x228>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	4b7c      	ldr	r3, [pc, #496]	; (8001250 <MX_GPIO_Init+0x228>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a7b      	ldr	r2, [pc, #492]	; (8001250 <MX_GPIO_Init+0x228>)
 8001064:	f043 0320 	orr.w	r3, r3, #32
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b79      	ldr	r3, [pc, #484]	; (8001250 <MX_GPIO_Init+0x228>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0320 	and.w	r3, r3, #32
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b75      	ldr	r3, [pc, #468]	; (8001250 <MX_GPIO_Init+0x228>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a74      	ldr	r2, [pc, #464]	; (8001250 <MX_GPIO_Init+0x228>)
 8001080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b72      	ldr	r3, [pc, #456]	; (8001250 <MX_GPIO_Init+0x228>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b6e      	ldr	r3, [pc, #440]	; (8001250 <MX_GPIO_Init+0x228>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a6d      	ldr	r2, [pc, #436]	; (8001250 <MX_GPIO_Init+0x228>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b6b      	ldr	r3, [pc, #428]	; (8001250 <MX_GPIO_Init+0x228>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b67      	ldr	r3, [pc, #412]	; (8001250 <MX_GPIO_Init+0x228>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a66      	ldr	r2, [pc, #408]	; (8001250 <MX_GPIO_Init+0x228>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b64      	ldr	r3, [pc, #400]	; (8001250 <MX_GPIO_Init+0x228>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b60      	ldr	r3, [pc, #384]	; (8001250 <MX_GPIO_Init+0x228>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a5f      	ldr	r2, [pc, #380]	; (8001250 <MX_GPIO_Init+0x228>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b5d      	ldr	r3, [pc, #372]	; (8001250 <MX_GPIO_Init+0x228>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b59      	ldr	r3, [pc, #356]	; (8001250 <MX_GPIO_Init+0x228>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a58      	ldr	r2, [pc, #352]	; (8001250 <MX_GPIO_Init+0x228>)
 80010f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b56      	ldr	r3, [pc, #344]	; (8001250 <MX_GPIO_Init+0x228>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f244 0181 	movw	r1, #16513	; 0x4081
 8001108:	4852      	ldr	r0, [pc, #328]	; (8001254 <MX_GPIO_Init+0x22c>)
 800110a:	f001 f9e9 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2140      	movs	r1, #64	; 0x40
 8001112:	4851      	ldr	r0, [pc, #324]	; (8001258 <MX_GPIO_Init+0x230>)
 8001114:	f001 f9e4 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	484b      	ldr	r0, [pc, #300]	; (800125c <MX_GPIO_Init+0x234>)
 8001130:	f001 f82a 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001134:	2332      	movs	r3, #50	; 0x32
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001144:	230b      	movs	r3, #11
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4843      	ldr	r0, [pc, #268]	; (800125c <MX_GPIO_Init+0x234>)
 8001150:	f001 f81a 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001154:	2386      	movs	r3, #134	; 0x86
 8001156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001164:	230b      	movs	r3, #11
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	483c      	ldr	r0, [pc, #240]	; (8001260 <MX_GPIO_Init+0x238>)
 8001170:	f001 f80a 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001174:	f244 0381 	movw	r3, #16513	; 0x4081
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4831      	ldr	r0, [pc, #196]	; (8001254 <MX_GPIO_Init+0x22c>)
 800118e:	f000 fffb 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a4:	230b      	movs	r3, #11
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4829      	ldr	r0, [pc, #164]	; (8001254 <MX_GPIO_Init+0x22c>)
 80011b0:	f000 ffea 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	4823      	ldr	r0, [pc, #140]	; (8001258 <MX_GPIO_Init+0x230>)
 80011cc:	f000 ffdc 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	481d      	ldr	r0, [pc, #116]	; (8001258 <MX_GPIO_Init+0x230>)
 80011e4:	f000 ffd0 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011e8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011fa:	230a      	movs	r3, #10
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4816      	ldr	r0, [pc, #88]	; (8001260 <MX_GPIO_Init+0x238>)
 8001206:	f000 ffbf 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800120a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4810      	ldr	r0, [pc, #64]	; (8001260 <MX_GPIO_Init+0x238>)
 8001220:	f000 ffb2 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001224:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001236:	230b      	movs	r3, #11
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_GPIO_Init+0x230>)
 8001242:	f000 ffa1 	bl	8002188 <HAL_GPIO_Init>

}
 8001246:	bf00      	nop
 8001248:	3730      	adds	r7, #48	; 0x30
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40020400 	.word	0x40020400
 8001258:	40021800 	.word	0x40021800
 800125c:	40020800 	.word	0x40020800
 8001260:	40020000 	.word	0x40020000

08001264 <uartSendString>:


void uartSendString(uint8_t *pstring){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

	uint8_t largo=0;
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]

	while(*(pstring+largo) != 0) largo++;
 8001270:	e002      	b.n	8001278 <uartSendString+0x14>
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	3301      	adds	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f6      	bne.n	8001272 <uartSendString+0xe>


	HAL_UART_Transmit(&huart3, pstring, largo, HAL_MAX_DELAY);
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	b29a      	uxth	r2, r3
 8001288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <uartSendString+0x38>)
 8001290:	f002 fe5f 	bl	8003f52 <HAL_UART_Transmit>

}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000008c 	.word	0x2000008c

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <Error_Handler+0x8>
	...

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <HAL_MspInit+0x4c>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <HAL_MspInit+0x4c>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_I2C_MspInit+0x84>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d12b      	bne.n	8001376 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_I2C_MspInit+0x88>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_I2C_MspInit+0x88>)
 8001328:	f043 0320 	orr.w	r3, r3, #32
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_I2C_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800133a:	2303      	movs	r3, #3
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133e:	2312      	movs	r3, #18
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800134a:	2304      	movs	r3, #4
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <HAL_I2C_MspInit+0x8c>)
 8001356:	f000 ff17 	bl	8002188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_I2C_MspInit+0x88>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_I2C_MspInit+0x88>)
 8001364:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_I2C_MspInit+0x88>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40005800 	.word	0x40005800
 8001384:	40023800 	.word	0x40023800
 8001388:	40021400 	.word	0x40021400

0800138c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a19      	ldr	r2, [pc, #100]	; (8001410 <HAL_UART_MspInit+0x84>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12c      	bne.n	8001408 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_UART_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_UART_MspInit+0x88>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_UART_MspInit+0x88>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_UART_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <HAL_UART_MspInit+0x88>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_UART_MspInit+0x88>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013f8:	2307      	movs	r3, #7
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <HAL_UART_MspInit+0x8c>)
 8001404:	f000 fec0 	bl	8002188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40004800 	.word	0x40004800
 8001414:	40023800 	.word	0x40023800
 8001418:	40020c00 	.word	0x40020c00

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 fd64 	bl	8001f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f003 f8cc 	bl	800463c <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20030000 	.word	0x20030000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	200000d0 	.word	0x200000d0
 80014d8:	20000140 	.word	0x20000140

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001506:	490e      	ldr	r1, [pc, #56]	; (8001540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800151c:	4c0b      	ldr	r4, [pc, #44]	; (800154c <LoopFillZerobss+0x26>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800152a:	f7ff ffd7 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152e:	f003 f88b 	bl	8004648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff fc4d 	bl	8000dd0 <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001538:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001544:	08005040 	.word	0x08005040
  ldr r2, =_sbss
 8001548:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800154c:	2000013c 	.word	0x2000013c

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>

08001552 <APDS9930_Init>:
 *      Author: Emiliano Eduardo Rodriguez
 */

#include <driver.h>

bool APDS9930_Init(void){
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0

	if(!powerOffSensor()){
 8001556:	f000 f9b3 	bl	80018c0 <powerOffSensor>
 800155a:	4603      	mov	r3, r0
 800155c:	f083 0301 	eor.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <APDS9930_Init+0x18>
		return false;
 8001566:	2300      	movs	r3, #0
 8001568:	e085      	b.n	8001676 <APDS9930_Init+0x124>
	}

	if(!setATIME(DEFAULT_ATIME)){
 800156a:	20ed      	movs	r0, #237	; 0xed
 800156c:	f000 fa1e 	bl	80019ac <setATIME>
 8001570:	4603      	mov	r3, r0
 8001572:	f083 0301 	eor.w	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <APDS9930_Init+0x2e>
			return false;
 800157c:	2300      	movs	r3, #0
 800157e:	e07a      	b.n	8001676 <APDS9930_Init+0x124>
		}

	if(!setWTIME(DEFAULT_WTIME)){
 8001580:	20ff      	movs	r0, #255	; 0xff
 8001582:	f000 fa2a 	bl	80019da <setWTIME>
 8001586:	4603      	mov	r3, r0
 8001588:	f083 0301 	eor.w	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <APDS9930_Init+0x44>
				return false;
 8001592:	2300      	movs	r3, #0
 8001594:	e06f      	b.n	8001676 <APDS9930_Init+0x124>
	     }

	if(!setPTIME(DEFAULT_PTIME)){
 8001596:	20ff      	movs	r0, #255	; 0xff
 8001598:	f000 fa36 	bl	8001a08 <setPTIME>
 800159c:	4603      	mov	r3, r0
 800159e:	f083 0301 	eor.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <APDS9930_Init+0x5a>
				return false;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e064      	b.n	8001676 <APDS9930_Init+0x124>
			}

	if(!setPPULSE(DEFAULT_PPULSE)){
 80015ac:	2008      	movs	r0, #8
 80015ae:	f000 fa42 	bl	8001a36 <setPPULSE>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f083 0301 	eor.w	r3, r3, #1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <APDS9930_Init+0x70>
					return false;
 80015be:	2300      	movs	r3, #0
 80015c0:	e059      	b.n	8001676 <APDS9930_Init+0x124>
				}

	if(!setPOFFSET(DEFAULT_POFFSET)){
 80015c2:	2000      	movs	r0, #0
 80015c4:	f000 fa4e 	bl	8001a64 <setPOFFSET>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <APDS9930_Init+0x86>
					return false;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e04e      	b.n	8001676 <APDS9930_Init+0x124>
				}
	if(!setPTIME(DEFAULT_PTIME)){
 80015d8:	20ff      	movs	r0, #255	; 0xff
 80015da:	f000 fa15 	bl	8001a08 <setPTIME>
 80015de:	4603      	mov	r3, r0
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <APDS9930_Init+0x9c>
					return false;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e043      	b.n	8001676 <APDS9930_Init+0x124>
				}
	if(!setCONFIG(DEFAULT_CONFIG)){
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 fa4f 	bl	8001a92 <setCONFIG>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f083 0301 	eor.w	r3, r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <APDS9930_Init+0xb2>
					return false;
 8001600:	2300      	movs	r3, #0
 8001602:	e038      	b.n	8001676 <APDS9930_Init+0x124>
				}

	if( !setLEDIntensity(DEFAULT_PDRIVE) ) {
 8001604:	2000      	movs	r0, #0
 8001606:	f000 f92f 	bl	8001868 <setLEDIntensity>
 800160a:	4603      	mov	r3, r0
 800160c:	f083 0301 	eor.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <APDS9930_Init+0xc8>
	        return false;
 8001616:	2300      	movs	r3, #0
 8001618:	e02d      	b.n	8001676 <APDS9930_Init+0x124>
	  	  	  	}
	if( !setProximityGain(DEFAULT_PGAIN) ) {
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f8cc 	bl	80017b8 <setProximityGain>
 8001620:	4603      	mov	r3, r0
 8001622:	f083 0301 	eor.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <APDS9930_Init+0xde>
	        return false;
 800162c:	2300      	movs	r3, #0
 800162e:	e022      	b.n	8001676 <APDS9930_Init+0x124>
	    		}
	if( !setAmbientLightGain(DEFAULT_AGAIN) ) {
 8001630:	2000      	movs	r0, #0
 8001632:	f000 f879 	bl	8001728 <setAmbientLightGain>
 8001636:	4603      	mov	r3, r0
 8001638:	f083 0301 	eor.w	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <APDS9930_Init+0xf4>
	        return false;
 8001642:	2300      	movs	r3, #0
 8001644:	e017      	b.n	8001676 <APDS9930_Init+0x124>
	    		}
	if( !setProximityDiode(DEFAULT_PDIODE) ) {
 8001646:	2020      	movs	r0, #32
 8001648:	f000 f8e2 	bl	8001810 <setProximityDiode>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <APDS9930_Init+0x10a>
	        return false;
 8001658:	2300      	movs	r3, #0
 800165a:	e00c      	b.n	8001676 <APDS9930_Init+0x124>
	            }

	if( !setOperation(SENSOR_WEN, 1) ) {
 800165c:	2101      	movs	r1, #1
 800165e:	2008      	movs	r0, #8
 8001660:	f000 f95c 	bl	800191c <setOperation>
 8001664:	4603      	mov	r3, r0
 8001666:	f083 0301 	eor.w	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <APDS9930_Init+0x122>
	        return false;
 8001670:	2300      	movs	r3, #0
 8001672:	e000      	b.n	8001676 <APDS9930_Init+0x124>
	    }

	return true;
 8001674:	2301      	movs	r3, #1
}
 8001676:	4618      	mov	r0, r3
 8001678:	bd80      	pop	{r7, pc}

0800167a <lightSensorOn>:

	return dato_read;

}

bool lightSensorOn(void){
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
	
    if( !setAmbientLightGain(DEFAULT_AGAIN) ) {
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f852 	bl	8001728 <setAmbientLightGain>
 8001684:	4603      	mov	r3, r0
 8001686:	f083 0301 	eor.w	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <lightSensorOn+0x1a>
        return false;
 8001690:	2300      	movs	r3, #0
 8001692:	e016      	b.n	80016c2 <lightSensorOn+0x48>
    }
    
    if( !powerOnSensor() ){
 8001694:	f000 f92b 	bl	80018ee <powerOnSensor>
 8001698:	4603      	mov	r3, r0
 800169a:	f083 0301 	eor.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <lightSensorOn+0x2e>
        return false;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e00c      	b.n	80016c2 <lightSensorOn+0x48>
    }
    if( !setOperation(SENSOR_AEN, 1) ) {
 80016a8:	2101      	movs	r1, #1
 80016aa:	2002      	movs	r0, #2
 80016ac:	f000 f936 	bl	800191c <setOperation>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f083 0301 	eor.w	r3, r3, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <lightSensorOn+0x46>
        return false;
 80016bc:	2300      	movs	r3, #0
 80016be:	e000      	b.n	80016c2 <lightSensorOn+0x48>
    }
    
    return true;
 80016c0:	2301      	movs	r3, #1

}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <proximitySensorOn>:
	else{
		return true;
	}
}

bool proximitySensorOn(void){
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
	
   if( !setProximityGain(DEFAULT_PGAIN) ) {
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f874 	bl	80017b8 <setProximityGain>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f083 0301 	eor.w	r3, r3, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <proximitySensorOn+0x1a>
        return false;
 80016dc:	2300      	movs	r3, #0
 80016de:	e021      	b.n	8001724 <proximitySensorOn+0x5e>
    }
    if( !setLEDIntensity(DEFAULT_PDRIVE) ) {
 80016e0:	2000      	movs	r0, #0
 80016e2:	f000 f8c1 	bl	8001868 <setLEDIntensity>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f083 0301 	eor.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <proximitySensorOn+0x30>
        return false;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e016      	b.n	8001724 <proximitySensorOn+0x5e>
    }
    
    if( !powerOnSensor() ){
 80016f6:	f000 f8fa 	bl	80018ee <powerOnSensor>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f083 0301 	eor.w	r3, r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <proximitySensorOn+0x44>
        return false;
 8001706:	2300      	movs	r3, #0
 8001708:	e00c      	b.n	8001724 <proximitySensorOn+0x5e>
    }
    
   if( !setOperation(SENSOR_PEN, 1) ) {
 800170a:	2101      	movs	r1, #1
 800170c:	2004      	movs	r0, #4
 800170e:	f000 f905 	bl	800191c <setOperation>
 8001712:	4603      	mov	r3, r0
 8001714:	f083 0301 	eor.w	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <proximitySensorOn+0x5c>
        return false;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <proximitySensorOn+0x5e>
    }

return true;
 8001722:	2301      	movs	r3, #1
	
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}

08001728 <setAmbientLightGain>:
	
		
}


bool setAmbientLightGain(uint8_t again){
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	uint8_t dato_read=0;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]

	  if( !APDS9930_ReadByte(SENSOR_CONTROL, &dato_read) ) {
 8001736:	f107 030f 	add.w	r3, r7, #15
 800173a:	4619      	mov	r1, r3
 800173c:	200f      	movs	r0, #15
 800173e:	f000 fac4 	bl	8001cca <APDS9930_ReadByte>
 8001742:	4603      	mov	r3, r0
 8001744:	f083 0301 	eor.w	r3, r3, #1
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <setAmbientLightGain+0x2a>
	         return false;
 800174e:	2300      	movs	r3, #0
 8001750:	e012      	b.n	8001778 <setAmbientLightGain+0x50>
	     }

	  again = again | dato_read;
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	4313      	orrs	r3, r2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	71fb      	strb	r3, [r7, #7]

	  if( !APDS9930_WriteByte(SENSOR_CONTROL, &again) ) {
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	4619      	mov	r1, r3
 8001760:	200f      	movs	r0, #15
 8001762:	f000 faf3 	bl	8001d4c <APDS9930_WriteByte>
 8001766:	4603      	mov	r3, r0
 8001768:	f083 0301 	eor.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <setAmbientLightGain+0x4e>
	           return false;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <setAmbientLightGain+0x50>
	      }


	   return true;
 8001776:	2301      	movs	r3, #1

}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <getAmbientLightGain>:

uint8_t getAmbientLightGain(void){
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
	uint8_t dato_read=0;
 8001786:	2300      	movs	r3, #0
 8001788:	71fb      	strb	r3, [r7, #7]

	  if( !APDS9930_ReadByte(SENSOR_CONTROL, &dato_read) ) {
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	4619      	mov	r1, r3
 800178e:	200f      	movs	r0, #15
 8001790:	f000 fa9b 	bl	8001cca <APDS9930_ReadByte>
 8001794:	4603      	mov	r3, r0
 8001796:	f083 0301 	eor.w	r3, r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <getAmbientLightGain+0x24>
	         return false;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e005      	b.n	80017b0 <getAmbientLightGain+0x30>
	    }

	  dato_read = dato_read & 0x03;
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	71fb      	strb	r3, [r7, #7]
	  return dato_read;
 80017ae:	79fb      	ldrb	r3, [r7, #7]

}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <setProximityGain>:

bool setProximityGain(uint8_t pgain){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  uint8_t dato_read=0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]

  if( !APDS9930_ReadByte(SENSOR_CONTROL, &dato_read) ) {
 80017c6:	f107 030f 	add.w	r3, r7, #15
 80017ca:	4619      	mov	r1, r3
 80017cc:	200f      	movs	r0, #15
 80017ce:	f000 fa7c 	bl	8001cca <APDS9930_ReadByte>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f083 0301 	eor.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <setProximityGain+0x2a>
         return false;
 80017de:	2300      	movs	r3, #0
 80017e0:	e012      	b.n	8001808 <setProximityGain+0x50>
     }

  pgain = pgain | dato_read;
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	71fb      	strb	r3, [r7, #7]

  if( !APDS9930_WriteByte(SENSOR_CONTROL, &pgain) ) {
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	4619      	mov	r1, r3
 80017f0:	200f      	movs	r0, #15
 80017f2:	f000 faab 	bl	8001d4c <APDS9930_WriteByte>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f083 0301 	eor.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <setProximityGain+0x4e>
           return false;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <setProximityGain+0x50>
      }


   return true;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <setProximityDiode>:

bool setProximityDiode(uint8_t pdiode){
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	uint8_t dato_read=0;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]

	  if( !APDS9930_ReadByte(SENSOR_CONTROL, &dato_read) ) {
 800181e:	f107 030f 	add.w	r3, r7, #15
 8001822:	4619      	mov	r1, r3
 8001824:	200f      	movs	r0, #15
 8001826:	f000 fa50 	bl	8001cca <APDS9930_ReadByte>
 800182a:	4603      	mov	r3, r0
 800182c:	f083 0301 	eor.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <setProximityDiode+0x2a>
	         return false;
 8001836:	2300      	movs	r3, #0
 8001838:	e012      	b.n	8001860 <setProximityDiode+0x50>
	     }

	  pdiode = pdiode | dato_read;
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	4313      	orrs	r3, r2
 8001840:	b2db      	uxtb	r3, r3
 8001842:	71fb      	strb	r3, [r7, #7]

	  if( !APDS9930_WriteByte(SENSOR_CONTROL, &pdiode) ) {
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	4619      	mov	r1, r3
 8001848:	200f      	movs	r0, #15
 800184a:	f000 fa7f 	bl	8001d4c <APDS9930_WriteByte>
 800184e:	4603      	mov	r3, r0
 8001850:	f083 0301 	eor.w	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <setProximityDiode+0x4e>
	           return false;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <setProximityDiode+0x50>
	      }


	   return true;
 800185e:	2301      	movs	r3, #1


}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <setLEDIntensity>:

bool setLEDIntensity(uint8_t pdrive){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	uint8_t dato_read=0;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]

	  if( !APDS9930_ReadByte(SENSOR_CONTROL, &dato_read) ) {
 8001876:	f107 030f 	add.w	r3, r7, #15
 800187a:	4619      	mov	r1, r3
 800187c:	200f      	movs	r0, #15
 800187e:	f000 fa24 	bl	8001cca <APDS9930_ReadByte>
 8001882:	4603      	mov	r3, r0
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <setLEDIntensity+0x2a>
	         return false;
 800188e:	2300      	movs	r3, #0
 8001890:	e012      	b.n	80018b8 <setLEDIntensity+0x50>
	     }

	  pdrive = pdrive | dato_read;
 8001892:	79fa      	ldrb	r2, [r7, #7]
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	4313      	orrs	r3, r2
 8001898:	b2db      	uxtb	r3, r3
 800189a:	71fb      	strb	r3, [r7, #7]

	  if( !APDS9930_WriteByte(SENSOR_CONTROL, &pdrive) ) {
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	4619      	mov	r1, r3
 80018a0:	200f      	movs	r0, #15
 80018a2:	f000 fa53 	bl	8001d4c <APDS9930_WriteByte>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f083 0301 	eor.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <setLEDIntensity+0x4e>
	           return false;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <setLEDIntensity+0x50>
	      }


	   return true;
 80018b6:	2301      	movs	r3, #1

}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <powerOffSensor>:

bool powerOffSensor(void){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
	uint8_t dato_write= 0x00;  //Escribo 0x00 en el registro enable para desactivar el sensor//
 80018c6:	2300      	movs	r3, #0
 80018c8:	71fb      	strb	r3, [r7, #7]
	
	if( !APDS9930_WriteByte(SENSOR_ENABLE, &dato_write) ) {
 80018ca:	1dfb      	adds	r3, r7, #7
 80018cc:	4619      	mov	r1, r3
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 fa3c 	bl	8001d4c <APDS9930_WriteByte>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f083 0301 	eor.w	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <powerOffSensor+0x24>
	           return false;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e000      	b.n	80018e6 <powerOffSensor+0x26>
	      }
	else{
		   return true;
 80018e4:	2301      	movs	r3, #1
	}
	
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <powerOnSensor>:

bool powerOnSensor(void){
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0

	   uint8_t enable_pon = SENSOR_PON | SENSOR_AEN | SENSOR_PEN ;  //PON = Power ON//
 80018f4:	2307      	movs	r3, #7
 80018f6:	71fb      	strb	r3, [r7, #7]

	  if( !APDS9930_WriteByte(SENSOR_ENABLE, &enable_pon) ) {
 80018f8:	1dfb      	adds	r3, r7, #7
 80018fa:	4619      	mov	r1, r3
 80018fc:	2000      	movs	r0, #0
 80018fe:	f000 fa25 	bl	8001d4c <APDS9930_WriteByte>
 8001902:	4603      	mov	r3, r0
 8001904:	f083 0301 	eor.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <powerOnSensor+0x24>
	           return false;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <powerOnSensor+0x26>
	      }

	   return true;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <setOperation>:

bool setOperation(uint8_t modo, uint8_t enable){
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	460a      	mov	r2, r1
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	4613      	mov	r3, r2
 800192a:	71bb      	strb	r3, [r7, #6]

	uint8_t enable_read=0;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]

		if( !APDS9930_ReadByte(SENSOR_ENABLE, &enable_read) ) {
 8001930:	f107 030f 	add.w	r3, r7, #15
 8001934:	4619      	mov	r1, r3
 8001936:	2000      	movs	r0, #0
 8001938:	f000 f9c7 	bl	8001cca <APDS9930_ReadByte>
 800193c:	4603      	mov	r3, r0
 800193e:	f083 0301 	eor.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <setOperation+0x30>
		        return false;
 8001948:	2300      	movs	r3, #0
 800194a:	e02b      	b.n	80019a4 <setOperation+0x88>
		    }

		if(enable){
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d011      	beq.n	8001976 <setOperation+0x5a>
			modo = modo | enable_read;
 8001952:	79fa      	ldrb	r2, [r7, #7]
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	4313      	orrs	r3, r2
 8001958:	b2db      	uxtb	r3, r3
 800195a:	71fb      	strb	r3, [r7, #7]
			if( !APDS9930_WriteByte(SENSOR_ENABLE, &modo) ) {
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	4619      	mov	r1, r3
 8001960:	2000      	movs	r0, #0
 8001962:	f000 f9f3 	bl	8001d4c <APDS9930_WriteByte>
 8001966:	4603      	mov	r3, r0
 8001968:	f083 0301 	eor.w	r3, r3, #1
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d017      	beq.n	80019a2 <setOperation+0x86>
		           return false;
 8001972:	2300      	movs	r3, #0
 8001974:	e016      	b.n	80019a4 <setOperation+0x88>
		      	}
		}
		else{
			modo = ~modo;
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	43db      	mvns	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	71fb      	strb	r3, [r7, #7]
			modo = modo & enable_read;
 800197e:	79fa      	ldrb	r2, [r7, #7]
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	4013      	ands	r3, r2
 8001984:	b2db      	uxtb	r3, r3
 8001986:	71fb      	strb	r3, [r7, #7]
			if( !APDS9930_WriteByte(SENSOR_ENABLE, &modo) ) {
 8001988:	1dfb      	adds	r3, r7, #7
 800198a:	4619      	mov	r1, r3
 800198c:	2000      	movs	r0, #0
 800198e:	f000 f9dd 	bl	8001d4c <APDS9930_WriteByte>
 8001992:	4603      	mov	r3, r0
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <setOperation+0x86>
		           return false;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <setOperation+0x88>
		      	}

		}

		return true;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <setATIME>:

bool setATIME(uint8_t atime){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
	if( !APDS9930_WriteByte(SENSOR_ATIME, &atime) ) {
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	4619      	mov	r1, r3
 80019ba:	2001      	movs	r0, #1
 80019bc:	f000 f9c6 	bl	8001d4c <APDS9930_WriteByte>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f083 0301 	eor.w	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <setATIME+0x24>
		 return false;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e000      	b.n	80019d2 <setATIME+0x26>
	}
	else{
		return true;
 80019d0:	2301      	movs	r3, #1
	}

}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <setWTIME>:

bool setWTIME(uint8_t wtime){
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
	if( !APDS9930_WriteByte(SENSOR_WTIME, &wtime) ) {
 80019e4:	1dfb      	adds	r3, r7, #7
 80019e6:	4619      	mov	r1, r3
 80019e8:	2003      	movs	r0, #3
 80019ea:	f000 f9af 	bl	8001d4c <APDS9930_WriteByte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f083 0301 	eor.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <setWTIME+0x24>
			 return false;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <setWTIME+0x26>
		}
		else{
			return true;
 80019fe:	2301      	movs	r3, #1
		}
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <setPTIME>:

bool setPTIME(uint8_t ptime){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
	if( !APDS9930_WriteByte(SENSOR_PTIME, &ptime) ) {
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	4619      	mov	r1, r3
 8001a16:	2002      	movs	r0, #2
 8001a18:	f000 f998 	bl	8001d4c <APDS9930_WriteByte>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f083 0301 	eor.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <setPTIME+0x24>
			 return false;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e000      	b.n	8001a2e <setPTIME+0x26>
		}
		else{
			return true;
 8001a2c:	2301      	movs	r3, #1
		}

}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <setPPULSE>:

bool setPPULSE(uint8_t ppulse){
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
	if( !APDS9930_WriteByte(SENSOR_PPULSE, &ppulse) ) {
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	4619      	mov	r1, r3
 8001a44:	200e      	movs	r0, #14
 8001a46:	f000 f981 	bl	8001d4c <APDS9930_WriteByte>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f083 0301 	eor.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <setPPULSE+0x24>
				 return false;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <setPPULSE+0x26>
			}
			else{
				return true;
 8001a5a:	2301      	movs	r3, #1
			}
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <setPOFFSET>:

bool setPOFFSET(uint8_t poffset){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
	if( !APDS9930_WriteByte(SENSOR_POFFSET, &poffset) ) {
 8001a6e:	1dfb      	adds	r3, r7, #7
 8001a70:	4619      	mov	r1, r3
 8001a72:	201e      	movs	r0, #30
 8001a74:	f000 f96a 	bl	8001d4c <APDS9930_WriteByte>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f083 0301 	eor.w	r3, r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <setPOFFSET+0x24>
				 return false;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e000      	b.n	8001a8a <setPOFFSET+0x26>
			}
			else{
				return true;
 8001a88:	2301      	movs	r3, #1
			}

}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <setCONFIG>:

bool setCONFIG(uint8_t config){
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71fb      	strb	r3, [r7, #7]

	if( !APDS9930_WriteByte(SENSOR_CONFIG, &config) ) {
 8001a9c:	1dfb      	adds	r3, r7, #7
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	200d      	movs	r0, #13
 8001aa2:	f000 f953 	bl	8001d4c <APDS9930_WriteByte>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f083 0301 	eor.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <setCONFIG+0x24>
				 return false;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <setCONFIG+0x26>
			}
			else{
				return true;
 8001ab6:	2301      	movs	r3, #1
			}
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <readCh0Light>:


bool readCh0Light(uint16_t *val_ch0) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]


    if(!APDS9930_ReadWord(SENSOR_CH0DATAL, val_ch0)){
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	2014      	movs	r0, #20
 8001acc:	f000 f917 	bl	8001cfe <APDS9930_ReadWord>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f083 0301 	eor.w	r3, r3, #1
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <readCh0Light+0x20>
    	return false;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e000      	b.n	8001ae2 <readCh0Light+0x22>
    }
    else{
    	return true;
 8001ae0:	2301      	movs	r3, #1

    }
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <readCh1Light>:


bool readCh1Light(uint16_t *val_ch1) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]


    if(!APDS9930_ReadWord(SENSOR_CH1DATAL, val_ch1)){
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	2016      	movs	r0, #22
 8001af6:	f000 f902 	bl	8001cfe <APDS9930_ReadWord>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f083 0301 	eor.w	r3, r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <readCh1Light+0x20>
    	return false;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <readCh1Light+0x22>
    }
    else{
    	return true;
 8001b0a:	2301      	movs	r3, #1

    }
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	0000      	movs	r0, r0
	...

08001b18 <readAmbientLight>:

bool readAmbientLight(float *val){
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	uint16_t ch0=0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	827b      	strh	r3, [r7, #18]
	uint16_t ch1=0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	823b      	strh	r3, [r7, #16]
	uint8_t x[4]={1,8,16,120};
 8001b28:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <readAmbientLight+0x180>)
 8001b2a:	60fb      	str	r3, [r7, #12]
	float ALSIT, iac1, iac2, iac, lpc;

	if( !readCh0Light(&ch0) ) {
 8001b2c:	f107 0312 	add.w	r3, r7, #18
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ffc5 	bl	8001ac0 <readCh0Light>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f083 0301 	eor.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <readAmbientLight+0x2e>
	        return false;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e093      	b.n	8001c6e <readAmbientLight+0x156>
	   }

	if( !readCh1Light(&ch1) ) {
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ffcd 	bl	8001aea <readCh1Light>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f083 0301 	eor.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <readAmbientLight+0x48>
	        return false;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e086      	b.n	8001c6e <readAmbientLight+0x156>
	    }

	ALSIT = 2.73 * (256 - DEFAULT_ATIME);
 8001b60:	4b4e      	ldr	r3, [pc, #312]	; (8001c9c <readAmbientLight+0x184>)
 8001b62:	623b      	str	r3, [r7, #32]
	iac1 = ch0 - ALS_B * ch1;
 8001b64:	8a7b      	ldrh	r3, [r7, #18]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fce4 	bl	8000534 <__aeabi_i2d>
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	460d      	mov	r5, r1
 8001b70:	8a3b      	ldrh	r3, [r7, #16]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcde 	bl	8000534 <__aeabi_i2d>
 8001b78:	a33f      	add	r3, pc, #252	; (adr r3, 8001c78 <readAmbientLight+0x160>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fd43 	bl	8000608 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4620      	mov	r0, r4
 8001b88:	4629      	mov	r1, r5
 8001b8a:	f7fe fb85 	bl	8000298 <__aeabi_dsub>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7fe ff49 	bl	8000a2c <__aeabi_d2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	61fb      	str	r3, [r7, #28]
	iac2 = ALS_C * ch0 - ALS_D * ch1;
 8001b9e:	8a7b      	ldrh	r3, [r7, #18]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcc7 	bl	8000534 <__aeabi_i2d>
 8001ba6:	a336      	add	r3, pc, #216	; (adr r3, 8001c80 <readAmbientLight+0x168>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fd2c 	bl	8000608 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	8a3b      	ldrh	r3, [r7, #16]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fcba 	bl	8000534 <__aeabi_i2d>
 8001bc0:	a331      	add	r3, pc, #196	; (adr r3, 8001c88 <readAmbientLight+0x170>)
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	f7fe fd1f 	bl	8000608 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4620      	mov	r0, r4
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	f7fe fb61 	bl	8000298 <__aeabi_dsub>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f7fe ff25 	bl	8000a2c <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	61bb      	str	r3, [r7, #24]
	if(iac1>iac2){
 8001be6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bea:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	dd02      	ble.n	8001bfe <readAmbientLight+0xe6>
		iac=iac1;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfc:	e001      	b.n	8001c02 <readAmbientLight+0xea>
	}
	else{
		iac=iac2;
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (iac < 0){
 8001c02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	d502      	bpl.n	8001c16 <readAmbientLight+0xfe>
		iac = 0;
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
	}

	lpc  = GA * DF / (ALSIT * x[getAmbientLightGain()]);
 8001c16:	f7ff fdb3 	bl	8001780 <getAmbientLightGain>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	3328      	adds	r3, #40	; 0x28
 8001c1e:	443b      	add	r3, r7
 8001c20:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	ee17 0a90 	vmov	r0, s15
 8001c38:	f7fe fc8e 	bl	8000558 <__aeabi_f2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	a113      	add	r1, pc, #76	; (adr r1, 8001c90 <readAmbientLight+0x178>)
 8001c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c46:	f7fe fe09 	bl	800085c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe feeb 	bl	8000a2c <__aeabi_d2f>
 8001c56:	4603      	mov	r3, r0
 8001c58:	617b      	str	r3, [r7, #20]
	*val = iac * lpc;
 8001c5a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8001c6c:	2301      	movs	r3, #1
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3728      	adds	r7, #40	; 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bdb0      	pop	{r4, r5, r7, pc}
 8001c76:	bf00      	nop
 8001c78:	83126e98 	.word	0x83126e98
 8001c7c:	3ffdcac0 	.word	0x3ffdcac0
 8001c80:	645a1cac 	.word	0x645a1cac
 8001c84:	3fe7df3b 	.word	0x3fe7df3b
 8001c88:	9db22d0e 	.word	0x9db22d0e
 8001c8c:	3ff4a7ef 	.word	0x3ff4a7ef
 8001c90:	47ae147b 	.word	0x47ae147b
 8001c94:	40397ae1 	.word	0x40397ae1
 8001c98:	78100801 	.word	0x78100801
 8001c9c:	424f7ae1 	.word	0x424f7ae1

08001ca0 <readProximity>:

bool readProximity(uint16_t *val){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

	if(!APDS9930_ReadWord(SENSOR_PDATAL, val)){
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	2018      	movs	r0, #24
 8001cac:	f000 f827 	bl	8001cfe <APDS9930_ReadWord>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f083 0301 	eor.w	r3, r3, #1
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <readProximity+0x20>
	    return false;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e000      	b.n	8001cc2 <readProximity+0x22>
	  }
	  else
	  {
	   return true;
 8001cc0:	2301      	movs	r3, #1
	  }
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <APDS9930_ReadByte>:



bool APDS9930_ReadByte(uint8_t registro, uint8_t *dato){
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	6039      	str	r1, [r7, #0]
 8001cd4:	71fb      	strb	r3, [r7, #7]

	if(!I2C_APDS_Read(registro | REPEATED_BYTE, dato, 1)){
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 f8af 	bl	8001e48 <I2C_APDS_Read>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <APDS9930_ReadByte+0x2a>
			return false;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <APDS9930_ReadByte+0x2c>

		}
		else{
			return true;
 8001cf4:	2301      	movs	r3, #1

		}
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <APDS9930_ReadWord>:

bool APDS9930_ReadWord(uint8_t registro, uint16_t *dato){
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	6039      	str	r1, [r7, #0]
 8001d08:	71fb      	strb	r3, [r7, #7]

	uint8_t buff[2]={0};
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	81bb      	strh	r3, [r7, #12]

	if(!I2C_APDS_Read(registro | AUTO_INCREMENT, buff, 2)){
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f107 010c 	add.w	r1, r7, #12
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f892 	bl	8001e48 <I2C_APDS_Read>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <APDS9930_ReadWord+0x30>
				return false;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e00a      	b.n	8001d44 <APDS9930_ReadWord+0x46>
			}

	*dato = buff[0]+256*buff[1];
 8001d2e:	7b3b      	ldrb	r3, [r7, #12]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	7b7b      	ldrb	r3, [r7, #13]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	801a      	strh	r2, [r3, #0]
	 return true;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <APDS9930_WriteByte>:



bool APDS9930_WriteByte(uint8_t registro, uint8_t *dato){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]

	if(!I2C_APDS_Write(registro | REPEATED_BYTE, dato, 1)){
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2201      	movs	r2, #1
 8001d64:	6839      	ldr	r1, [r7, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f84a 	bl	8001e00 <I2C_APDS_Write>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <APDS9930_WriteByte+0x2a>
		return false;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <APDS9930_WriteByte+0x2c>

	}
	else{
		return true;
 8001d76:	2301      	movs	r3, #1

	}

}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <I2C_APDS_Init>:
#include <main.h>

I2C_HandleTypeDef hi2c2;

void I2C_APDS_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0


	  hi2c2.Instance = I2C2;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001d86:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <I2C_APDS_Init+0x78>)
 8001d88:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.ClockSpeed = 100000;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <I2C_APDS_Init+0x7c>)
 8001d8e:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.OwnAddress1 = 0;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da2:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2 = 0;
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001dbe:	f000 fba9 	bl	8002514 <HAL_I2C_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <I2C_APDS_Init+0x4c>
	  {
	    Error_Handler();
 8001dc8:	f7ff fa6a 	bl	80012a0 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001dcc:	2110      	movs	r1, #16
 8001dce:	4809      	ldr	r0, [pc, #36]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001dd0:	f001 fb5f 	bl	8003492 <HAL_I2CEx_ConfigAnalogFilter>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <I2C_APDS_Init+0x5e>
	  {
	    Error_Handler();
 8001dda:	f7ff fa61 	bl	80012a0 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001dde:	2100      	movs	r1, #0
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <I2C_APDS_Init+0x74>)
 8001de2:	f001 fb92 	bl	800350a <HAL_I2CEx_ConfigDigitalFilter>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <I2C_APDS_Init+0x70>
	  {
	    Error_Handler();
 8001dec:	f7ff fa58 	bl	80012a0 <Error_Handler>
	  }


}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	200000d4 	.word	0x200000d4
 8001df8:	40005800 	.word	0x40005800
 8001dfc:	000186a0 	.word	0x000186a0

08001e00 <I2C_APDS_Write>:
}

//HAL_MAX_DELAY ->Es el timeout máximo que se puede asignar por la HAL//


uint8_t I2C_APDS_Write(uint16_t direccion_registro, uint8_t *data, uint16_t size){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af04      	add	r7, sp, #16
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	80fb      	strh	r3, [r7, #6]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Write(&hi2c2, SENSOR_I2C_ADDR, direccion_registro, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	88bb      	ldrh	r3, [r7, #4]
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	2172      	movs	r1, #114	; 0x72
 8001e24:	4807      	ldr	r0, [pc, #28]	; (8001e44 <I2C_APDS_Write+0x44>)
 8001e26:	f000 fcb9 	bl	800279c <HAL_I2C_Mem_Write>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73fb      	strb	r3, [r7, #15]
	    if ( ret != HAL_OK ) {
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <I2C_APDS_Write+0x38>
	      return 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e000      	b.n	8001e3a <I2C_APDS_Write+0x3a>
	    }
	    else{
	      return 1;
 8001e38:	2301      	movs	r3, #1
	    }
	 HAL_Delay(100);
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200000d4 	.word	0x200000d4

08001e48 <I2C_APDS_Read>:


uint8_t I2C_APDS_Read(uint16_t direccion_registro, uint8_t *data, uint16_t size){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af04      	add	r7, sp, #16
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	80fb      	strh	r3, [r7, #6]
 8001e54:	4613      	mov	r3, r2
 8001e56:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(&hi2c2, SENSOR_I2C_ADDR, direccion_registro, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001e58:	88fa      	ldrh	r2, [r7, #6]
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	88bb      	ldrh	r3, [r7, #4]
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	2172      	movs	r1, #114	; 0x72
 8001e6c:	4807      	ldr	r0, [pc, #28]	; (8001e8c <I2C_APDS_Read+0x44>)
 8001e6e:	f000 fd8f 	bl	8002990 <HAL_I2C_Mem_Read>
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
		 if ( ret != HAL_OK ) {
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <I2C_APDS_Read+0x38>
		    return 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <I2C_APDS_Read+0x3a>
		  }
		  else{
		    return 1;
 8001e80:	2301      	movs	r3, #1
		  }
     HAL_Delay(100);
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200000d4 	.word	0x200000d4

08001e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <HAL_Init+0x40>)
 8001e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <HAL_Init+0x40>)
 8001ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <HAL_Init+0x40>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb8:	2003      	movs	r0, #3
 8001eba:	f000 f931 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 f808 	bl	8001ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec4:	f7ff f9f2 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023c00 	.word	0x40023c00

08001ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_InitTick+0x54>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x58>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f93b 	bl	800216e <HAL_SYSTICK_Config>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00e      	b.n	8001f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b0f      	cmp	r3, #15
 8001f06:	d80a      	bhi.n	8001f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f10:	f000 f911 	bl	8002136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f14:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <HAL_InitTick+0x5c>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e000      	b.n	8001f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000004 	.word	0x20000004

08001f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x20>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x24>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_IncTick+0x24>)
 8001f46:	6013      	str	r3, [r2, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008
 8001f58:	20000128 	.word	0x20000128

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000128 	.word	0x20000128

08001f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff ffee 	bl	8001f5c <HAL_GetTick>
 8001f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f8c:	d005      	beq.n	8001f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_Delay+0x44>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f9a:	bf00      	nop
 8001f9c:	f7ff ffde 	bl	8001f5c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d8f7      	bhi.n	8001f9c <HAL_Delay+0x28>
  {
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008

08001fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	60d3      	str	r3, [r2, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <__NVIC_GetPriorityGrouping+0x18>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 0307 	and.w	r3, r3, #7
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	; (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ec:	d301      	bcc.n	80020f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <SysTick_Config+0x40>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fa:	210f      	movs	r1, #15
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002100:	f7ff ff8e 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <SysTick_Config+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <SysTick_Config+0x40>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff47 	bl	8001fbc <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff5c 	bl	8002004 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff8e 	bl	8002074 <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff5d 	bl	8002020 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffb0 	bl	80020dc <SysTick_Config>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e177      	b.n	8002494 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 8166 	bne.w	800248e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d005      	beq.n	80021da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d130      	bne.n	800223c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	2203      	movs	r2, #3
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 0201 	and.w	r2, r3, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b03      	cmp	r3, #3
 8002246:	d017      	beq.n	8002278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d123      	bne.n	80022cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3208      	adds	r2, #8
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	69b9      	ldr	r1, [r7, #24]
 80022c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0203 	and.w	r2, r3, #3
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80c0 	beq.w	800248e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b66      	ldr	r3, [pc, #408]	; (80024ac <HAL_GPIO_Init+0x324>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a65      	ldr	r2, [pc, #404]	; (80024ac <HAL_GPIO_Init+0x324>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_GPIO_Init+0x324>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232a:	4a61      	ldr	r2, [pc, #388]	; (80024b0 <HAL_GPIO_Init+0x328>)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a58      	ldr	r2, [pc, #352]	; (80024b4 <HAL_GPIO_Init+0x32c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d037      	beq.n	80023c6 <HAL_GPIO_Init+0x23e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a57      	ldr	r2, [pc, #348]	; (80024b8 <HAL_GPIO_Init+0x330>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d031      	beq.n	80023c2 <HAL_GPIO_Init+0x23a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a56      	ldr	r2, [pc, #344]	; (80024bc <HAL_GPIO_Init+0x334>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d02b      	beq.n	80023be <HAL_GPIO_Init+0x236>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a55      	ldr	r2, [pc, #340]	; (80024c0 <HAL_GPIO_Init+0x338>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d025      	beq.n	80023ba <HAL_GPIO_Init+0x232>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a54      	ldr	r2, [pc, #336]	; (80024c4 <HAL_GPIO_Init+0x33c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01f      	beq.n	80023b6 <HAL_GPIO_Init+0x22e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a53      	ldr	r2, [pc, #332]	; (80024c8 <HAL_GPIO_Init+0x340>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d019      	beq.n	80023b2 <HAL_GPIO_Init+0x22a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a52      	ldr	r2, [pc, #328]	; (80024cc <HAL_GPIO_Init+0x344>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <HAL_GPIO_Init+0x226>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a51      	ldr	r2, [pc, #324]	; (80024d0 <HAL_GPIO_Init+0x348>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00d      	beq.n	80023aa <HAL_GPIO_Init+0x222>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a50      	ldr	r2, [pc, #320]	; (80024d4 <HAL_GPIO_Init+0x34c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d007      	beq.n	80023a6 <HAL_GPIO_Init+0x21e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <HAL_GPIO_Init+0x350>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_GPIO_Init+0x21a>
 800239e:	2309      	movs	r3, #9
 80023a0:	e012      	b.n	80023c8 <HAL_GPIO_Init+0x240>
 80023a2:	230a      	movs	r3, #10
 80023a4:	e010      	b.n	80023c8 <HAL_GPIO_Init+0x240>
 80023a6:	2308      	movs	r3, #8
 80023a8:	e00e      	b.n	80023c8 <HAL_GPIO_Init+0x240>
 80023aa:	2307      	movs	r3, #7
 80023ac:	e00c      	b.n	80023c8 <HAL_GPIO_Init+0x240>
 80023ae:	2306      	movs	r3, #6
 80023b0:	e00a      	b.n	80023c8 <HAL_GPIO_Init+0x240>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x240>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x240>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x240>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x240>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x240>
 80023c6:	2300      	movs	r3, #0
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d8:	4935      	ldr	r1, [pc, #212]	; (80024b0 <HAL_GPIO_Init+0x328>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_GPIO_Init+0x354>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240a:	4a34      	ldr	r2, [pc, #208]	; (80024dc <HAL_GPIO_Init+0x354>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002410:	4b32      	ldr	r3, [pc, #200]	; (80024dc <HAL_GPIO_Init+0x354>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002434:	4a29      	ldr	r2, [pc, #164]	; (80024dc <HAL_GPIO_Init+0x354>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800243a:	4b28      	ldr	r3, [pc, #160]	; (80024dc <HAL_GPIO_Init+0x354>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <HAL_GPIO_Init+0x354>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_GPIO_Init+0x354>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <HAL_GPIO_Init+0x354>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f ae84 	bls.w	80021a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40013800 	.word	0x40013800
 80024b4:	40020000 	.word	0x40020000
 80024b8:	40020400 	.word	0x40020400
 80024bc:	40020800 	.word	0x40020800
 80024c0:	40020c00 	.word	0x40020c00
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40021400 	.word	0x40021400
 80024cc:	40021800 	.word	0x40021800
 80024d0:	40021c00 	.word	0x40021c00
 80024d4:	40022000 	.word	0x40022000
 80024d8:	40022400 	.word	0x40022400
 80024dc:	40013c00 	.word	0x40013c00

080024e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024fc:	e003      	b.n	8002506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	041a      	lsls	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	619a      	str	r2, [r3, #24]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e12b      	b.n	800277e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe fede 	bl	80012fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2224      	movs	r2, #36	; 0x24
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002578:	f001 fc76 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 800257c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4a81      	ldr	r2, [pc, #516]	; (8002788 <HAL_I2C_Init+0x274>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d807      	bhi.n	8002598 <HAL_I2C_Init+0x84>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a80      	ldr	r2, [pc, #512]	; (800278c <HAL_I2C_Init+0x278>)
 800258c:	4293      	cmp	r3, r2
 800258e:	bf94      	ite	ls
 8002590:	2301      	movls	r3, #1
 8002592:	2300      	movhi	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e006      	b.n	80025a6 <HAL_I2C_Init+0x92>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a7d      	ldr	r2, [pc, #500]	; (8002790 <HAL_I2C_Init+0x27c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	bf94      	ite	ls
 80025a0:	2301      	movls	r3, #1
 80025a2:	2300      	movhi	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0e7      	b.n	800277e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a78      	ldr	r2, [pc, #480]	; (8002794 <HAL_I2C_Init+0x280>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0c9b      	lsrs	r3, r3, #18
 80025b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a6a      	ldr	r2, [pc, #424]	; (8002788 <HAL_I2C_Init+0x274>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d802      	bhi.n	80025e8 <HAL_I2C_Init+0xd4>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	3301      	adds	r3, #1
 80025e6:	e009      	b.n	80025fc <HAL_I2C_Init+0xe8>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	4a69      	ldr	r2, [pc, #420]	; (8002798 <HAL_I2C_Init+0x284>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	3301      	adds	r3, #1
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	430b      	orrs	r3, r1
 8002602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800260e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	495c      	ldr	r1, [pc, #368]	; (8002788 <HAL_I2C_Init+0x274>)
 8002618:	428b      	cmp	r3, r1
 800261a:	d819      	bhi.n	8002650 <HAL_I2C_Init+0x13c>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e59      	subs	r1, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fbb1 f3f3 	udiv	r3, r1, r3
 800262a:	1c59      	adds	r1, r3, #1
 800262c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002630:	400b      	ands	r3, r1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_I2C_Init+0x138>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1e59      	subs	r1, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fbb1 f3f3 	udiv	r3, r1, r3
 8002644:	3301      	adds	r3, #1
 8002646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264a:	e051      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 800264c:	2304      	movs	r3, #4
 800264e:	e04f      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d111      	bne.n	800267c <HAL_I2C_Init+0x168>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1e58      	subs	r0, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	440b      	add	r3, r1
 8002666:	fbb0 f3f3 	udiv	r3, r0, r3
 800266a:	3301      	adds	r3, #1
 800266c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e012      	b.n	80026a2 <HAL_I2C_Init+0x18e>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1e58      	subs	r0, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	0099      	lsls	r1, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Init+0x196>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e022      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10e      	bne.n	80026d0 <HAL_I2C_Init+0x1bc>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1e58      	subs	r0, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	440b      	add	r3, r1
 80026c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ce:	e00f      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e58      	subs	r0, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	0099      	lsls	r1, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	6809      	ldr	r1, [r1, #0]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800271e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6911      	ldr	r1, [r2, #16]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68d2      	ldr	r2, [r2, #12]
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	430b      	orrs	r3, r1
 8002732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	000186a0 	.word	0x000186a0
 800278c:	001e847f 	.word	0x001e847f
 8002790:	003d08ff 	.word	0x003d08ff
 8002794:	431bde83 	.word	0x431bde83
 8002798:	10624dd3 	.word	0x10624dd3

0800279c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	817b      	strh	r3, [r7, #10]
 80027ae:	460b      	mov	r3, r1
 80027b0:	813b      	strh	r3, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b6:	f7ff fbd1 	bl	8001f5c <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	f040 80d9 	bne.w	800297c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2319      	movs	r3, #25
 80027d0:	2201      	movs	r2, #1
 80027d2:	496d      	ldr	r1, [pc, #436]	; (8002988 <HAL_I2C_Mem_Write+0x1ec>)
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fc7f 	bl	80030d8 <I2C_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
 80027e2:	e0cc      	b.n	800297e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Mem_Write+0x56>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e0c5      	b.n	800297e <HAL_I2C_Mem_Write+0x1e2>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d007      	beq.n	8002818 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002826:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2221      	movs	r2, #33	; 0x21
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a3a      	ldr	r2, [r7, #32]
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a4d      	ldr	r2, [pc, #308]	; (800298c <HAL_I2C_Mem_Write+0x1f0>)
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800285a:	88f8      	ldrh	r0, [r7, #6]
 800285c:	893a      	ldrh	r2, [r7, #8]
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4603      	mov	r3, r0
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fab6 	bl	8002ddc <I2C_RequestMemoryWrite>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d052      	beq.n	800291c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e081      	b.n	800297e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fd00 	bl	8003284 <I2C_WaitOnTXEFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00d      	beq.n	80028a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b04      	cmp	r3, #4
 8002890:	d107      	bne.n	80028a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e06b      	b.n	800297e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d11b      	bne.n	800291c <HAL_I2C_Mem_Write+0x180>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d017      	beq.n	800291c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1aa      	bne.n	800287a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fcec 	bl	8003306 <I2C_WaitOnBTFFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	2b04      	cmp	r3, #4
 800293a:	d107      	bne.n	800294c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e016      	b.n	800297e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	e000      	b.n	800297e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800297c:	2302      	movs	r3, #2
  }
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	00100002 	.word	0x00100002
 800298c:	ffff0000 	.word	0xffff0000

08002990 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	; 0x30
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	817b      	strh	r3, [r7, #10]
 80029a2:	460b      	mov	r3, r1
 80029a4:	813b      	strh	r3, [r7, #8]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029aa:	f7ff fad7 	bl	8001f5c <HAL_GetTick>
 80029ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	f040 8208 	bne.w	8002dce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2319      	movs	r3, #25
 80029c4:	2201      	movs	r2, #1
 80029c6:	497b      	ldr	r1, [pc, #492]	; (8002bb4 <HAL_I2C_Mem_Read+0x224>)
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fb85 	bl	80030d8 <I2C_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
 80029d6:	e1fb      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_I2C_Mem_Read+0x56>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e1f4      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x440>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d007      	beq.n	8002a0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2222      	movs	r2, #34	; 0x22
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a5b      	ldr	r2, [pc, #364]	; (8002bb8 <HAL_I2C_Mem_Read+0x228>)
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a4e:	88f8      	ldrh	r0, [r7, #6]
 8002a50:	893a      	ldrh	r2, [r7, #8]
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fa52 	bl	8002f08 <I2C_RequestMemoryRead>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e1b0      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d113      	bne.n	8002a9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	623b      	str	r3, [r7, #32]
 8002a8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e184      	b.n	8002da8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d11b      	bne.n	8002ade <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e164      	b.n	8002da8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d11b      	bne.n	8002b1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	e144      	b.n	8002da8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b34:	e138      	b.n	8002da8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	f200 80f1 	bhi.w	8002d22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d123      	bne.n	8002b90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fc1b 	bl	8003388 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e139      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b8e:	e10b      	b.n	8002da8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d14e      	bne.n	8002c36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4906      	ldr	r1, [pc, #24]	; (8002bbc <HAL_I2C_Mem_Read+0x22c>)
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fa98 	bl	80030d8 <I2C_WaitOnFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e10e      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x440>
 8002bb2:	bf00      	nop
 8002bb4:	00100002 	.word	0x00100002
 8002bb8:	ffff0000 	.word	0xffff0000
 8002bbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c34:	e0b8      	b.n	8002da8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4966      	ldr	r1, [pc, #408]	; (8002dd8 <HAL_I2C_Mem_Read+0x448>)
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fa49 	bl	80030d8 <I2C_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0bf      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c98:	2200      	movs	r2, #0
 8002c9a:	494f      	ldr	r1, [pc, #316]	; (8002dd8 <HAL_I2C_Mem_Read+0x448>)
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fa1b 	bl	80030d8 <I2C_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e091      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d20:	e042      	b.n	8002da8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fb2e 	bl	8003388 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e04c      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d118      	bne.n	8002da8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f47f aec2 	bne.w	8002b36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e000      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
  }
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	00010004 	.word	0x00010004

08002ddc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	4608      	mov	r0, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	461a      	mov	r2, r3
 8002dea:	4603      	mov	r3, r0
 8002dec:	817b      	strh	r3, [r7, #10]
 8002dee:	460b      	mov	r3, r1
 8002df0:	813b      	strh	r3, [r7, #8]
 8002df2:	4613      	mov	r3, r2
 8002df4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f960 	bl	80030d8 <I2C_WaitOnFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e2c:	d103      	bne.n	8002e36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e05f      	b.n	8002efa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e3a:	897b      	ldrh	r3, [r7, #10]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	6a3a      	ldr	r2, [r7, #32]
 8002e4e:	492d      	ldr	r1, [pc, #180]	; (8002f04 <I2C_RequestMemoryWrite+0x128>)
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f998 	bl	8003186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e04c      	b.n	8002efa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	6a39      	ldr	r1, [r7, #32]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fa02 	bl	8003284 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d107      	bne.n	8002e9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e02b      	b.n	8002efa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea8:	893b      	ldrh	r3, [r7, #8]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	611a      	str	r2, [r3, #16]
 8002eb2:	e021      	b.n	8002ef8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002eb4:	893b      	ldrh	r3, [r7, #8]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	6a39      	ldr	r1, [r7, #32]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f9dc 	bl	8003284 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00d      	beq.n	8002eee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d107      	bne.n	8002eea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e005      	b.n	8002efa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eee:	893b      	ldrh	r3, [r7, #8]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	00010002 	.word	0x00010002

08002f08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	4608      	mov	r0, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	461a      	mov	r2, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	817b      	strh	r3, [r7, #10]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	813b      	strh	r3, [r7, #8]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f8c2 	bl	80030d8 <I2C_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00d      	beq.n	8002f76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f68:	d103      	bne.n	8002f72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0aa      	b.n	80030cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f76:	897b      	ldrh	r3, [r7, #10]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	6a3a      	ldr	r2, [r7, #32]
 8002f8a:	4952      	ldr	r1, [pc, #328]	; (80030d4 <I2C_RequestMemoryRead+0x1cc>)
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f8fa 	bl	8003186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e097      	b.n	80030cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	6a39      	ldr	r1, [r7, #32]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f964 	bl	8003284 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d107      	bne.n	8002fda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e076      	b.n	80030cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d105      	bne.n	8002ff0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe4:	893b      	ldrh	r3, [r7, #8]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	611a      	str	r2, [r3, #16]
 8002fee:	e021      	b.n	8003034 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ff0:	893b      	ldrh	r3, [r7, #8]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	6a39      	ldr	r1, [r7, #32]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f93e 	bl	8003284 <I2C_WaitOnTXEFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	2b04      	cmp	r3, #4
 8003014:	d107      	bne.n	8003026 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003024:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e050      	b.n	80030cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800302a:	893b      	ldrh	r3, [r7, #8]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	6a39      	ldr	r1, [r7, #32]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f923 	bl	8003284 <I2C_WaitOnTXEFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00d      	beq.n	8003060 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	2b04      	cmp	r3, #4
 800304a:	d107      	bne.n	800305c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e035      	b.n	80030cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800306e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	2200      	movs	r2, #0
 8003078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f82b 	bl	80030d8 <I2C_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003096:	d103      	bne.n	80030a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e013      	b.n	80030cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030a4:	897b      	ldrh	r3, [r7, #10]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	6a3a      	ldr	r2, [r7, #32]
 80030b8:	4906      	ldr	r1, [pc, #24]	; (80030d4 <I2C_RequestMemoryRead+0x1cc>)
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f863 	bl	8003186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	00010002 	.word	0x00010002

080030d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e8:	e025      	b.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f0:	d021      	beq.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7fe ff33 	bl	8001f5c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d302      	bcc.n	8003108 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d116      	bne.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f043 0220 	orr.w	r2, r3, #32
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e023      	b.n	800317e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d10d      	bne.n	800315c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4013      	ands	r3, r2
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	e00c      	b.n	8003176 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	43da      	mvns	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4013      	ands	r3, r2
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf0c      	ite	eq
 800316e:	2301      	moveq	r3, #1
 8003170:	2300      	movne	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	429a      	cmp	r2, r3
 800317a:	d0b6      	beq.n	80030ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003194:	e051      	b.n	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a4:	d123      	bne.n	80031ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f043 0204 	orr.w	r2, r3, #4
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e046      	b.n	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f4:	d021      	beq.n	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f6:	f7fe feb1 	bl	8001f5c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	429a      	cmp	r2, r3
 8003204:	d302      	bcc.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d116      	bne.n	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f043 0220 	orr.w	r2, r3, #32
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e020      	b.n	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10c      	bne.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4013      	ands	r3, r2
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf14      	ite	ne
 8003256:	2301      	movne	r3, #1
 8003258:	2300      	moveq	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	e00b      	b.n	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	43da      	mvns	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4013      	ands	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d18d      	bne.n	8003196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003290:	e02d      	b.n	80032ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f8ce 	bl	8003434 <I2C_IsAcknowledgeFailed>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e02d      	b.n	80032fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a8:	d021      	beq.n	80032ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032aa:	f7fe fe57 	bl	8001f5c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d302      	bcc.n	80032c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d116      	bne.n	80032ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e007      	b.n	80032fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b80      	cmp	r3, #128	; 0x80
 80032fa:	d1ca      	bne.n	8003292 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003312:	e02d      	b.n	8003370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f88d 	bl	8003434 <I2C_IsAcknowledgeFailed>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e02d      	b.n	8003380 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800332a:	d021      	beq.n	8003370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332c:	f7fe fe16 	bl	8001f5c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	429a      	cmp	r2, r3
 800333a:	d302      	bcc.n	8003342 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d116      	bne.n	8003370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e007      	b.n	8003380 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b04      	cmp	r3, #4
 800337c:	d1ca      	bne.n	8003314 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003394:	e042      	b.n	800341c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d119      	bne.n	80033d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0210 	mvn.w	r2, #16
 80033ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e029      	b.n	800342c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d8:	f7fe fdc0 	bl	8001f5c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d116      	bne.n	800341c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f043 0220 	orr.w	r2, r3, #32
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e007      	b.n	800342c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	d1b5      	bne.n	8003396 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344a:	d11b      	bne.n	8003484 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003454:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f043 0204 	orr.w	r2, r3, #4
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d129      	bne.n	80034fc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0210 	bic.w	r2, r2, #16
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b20      	cmp	r3, #32
 8003522:	d12a      	bne.n	800357a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	; 0x24
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	f023 030f 	bic.w	r3, r3, #15
 800354a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b29a      	uxth	r2, r3
 8003550:	89fb      	ldrh	r3, [r7, #14]
 8003552:	4313      	orrs	r3, r2
 8003554:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	89fa      	ldrh	r2, [r7, #14]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e267      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d075      	beq.n	8003692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a6:	4b88      	ldr	r3, [pc, #544]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d00c      	beq.n	80035cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b2:	4b85      	ldr	r3, [pc, #532]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d112      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035be:	4b82      	ldr	r3, [pc, #520]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	4b7e      	ldr	r3, [pc, #504]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d05b      	beq.n	8003690 <HAL_RCC_OscConfig+0x108>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d157      	bne.n	8003690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e242      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ec:	d106      	bne.n	80035fc <HAL_RCC_OscConfig+0x74>
 80035ee:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a75      	ldr	r2, [pc, #468]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	e01d      	b.n	8003638 <HAL_RCC_OscConfig+0xb0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003604:	d10c      	bne.n	8003620 <HAL_RCC_OscConfig+0x98>
 8003606:	4b70      	ldr	r3, [pc, #448]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6f      	ldr	r2, [pc, #444]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b6d      	ldr	r3, [pc, #436]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a6c      	ldr	r2, [pc, #432]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e00b      	b.n	8003638 <HAL_RCC_OscConfig+0xb0>
 8003620:	4b69      	ldr	r3, [pc, #420]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a68      	ldr	r2, [pc, #416]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b66      	ldr	r3, [pc, #408]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a65      	ldr	r2, [pc, #404]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe fc8c 	bl	8001f5c <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003648:	f7fe fc88 	bl	8001f5c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e207      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	4b5b      	ldr	r3, [pc, #364]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0xc0>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fe fc78 	bl	8001f5c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003670:	f7fe fc74 	bl	8001f5c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e1f3      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003682:	4b51      	ldr	r3, [pc, #324]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0xe8>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d063      	beq.n	8003766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369e:	4b4a      	ldr	r3, [pc, #296]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d11c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b6:	4b44      	ldr	r3, [pc, #272]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d116      	bne.n	80036f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_RCC_OscConfig+0x152>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d001      	beq.n	80036da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e1c7      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036da:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4937      	ldr	r1, [pc, #220]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ee:	e03a      	b.n	8003766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d020      	beq.n	800373a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f8:	4b34      	ldr	r3, [pc, #208]	; (80037cc <HAL_RCC_OscConfig+0x244>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fe fc2d 	bl	8001f5c <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003706:	f7fe fc29 	bl	8001f5c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e1a8      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003724:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4925      	ldr	r1, [pc, #148]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003734:	4313      	orrs	r3, r2
 8003736:	600b      	str	r3, [r1, #0]
 8003738:	e015      	b.n	8003766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373a:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_RCC_OscConfig+0x244>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe fc0c 	bl	8001f5c <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003748:	f7fe fc08 	bl	8001f5c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e187      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d036      	beq.n	80037e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <HAL_RCC_OscConfig+0x248>)
 800377c:	2201      	movs	r2, #1
 800377e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fe fbec 	bl	8001f5c <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003788:	f7fe fbe8 	bl	8001f5c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e167      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800379c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x200>
 80037a6:	e01b      	b.n	80037e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCC_OscConfig+0x248>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ae:	f7fe fbd5 	bl	8001f5c <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b4:	e00e      	b.n	80037d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b6:	f7fe fbd1 	bl	8001f5c <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d907      	bls.n	80037d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e150      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
 80037c8:	40023800 	.word	0x40023800
 80037cc:	42470000 	.word	0x42470000
 80037d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d4:	4b88      	ldr	r3, [pc, #544]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80037d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ea      	bne.n	80037b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8097 	beq.w	800391c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f2:	4b81      	ldr	r3, [pc, #516]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10f      	bne.n	800381e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	4b7d      	ldr	r3, [pc, #500]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a7c      	ldr	r2, [pc, #496]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b7a      	ldr	r3, [pc, #488]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b77      	ldr	r3, [pc, #476]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382a:	4b74      	ldr	r3, [pc, #464]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a73      	ldr	r2, [pc, #460]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fe fb91 	bl	8001f5c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7fe fb8d 	bl	8001f5c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e10c      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b6a      	ldr	r3, [pc, #424]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x2ea>
 8003864:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a63      	ldr	r2, [pc, #396]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
 8003870:	e01c      	b.n	80038ac <HAL_RCC_OscConfig+0x324>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b05      	cmp	r3, #5
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x30c>
 800387a:	4b5f      	ldr	r3, [pc, #380]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a5e      	ldr	r2, [pc, #376]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
 8003886:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a5b      	ldr	r2, [pc, #364]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
 8003892:	e00b      	b.n	80038ac <HAL_RCC_OscConfig+0x324>
 8003894:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a57      	ldr	r2, [pc, #348]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
 80038a0:	4b55      	ldr	r3, [pc, #340]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	4a54      	ldr	r2, [pc, #336]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80038a6:	f023 0304 	bic.w	r3, r3, #4
 80038aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d015      	beq.n	80038e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fe fb52 	bl	8001f5c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fe fb4e 	bl	8001f5c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0cb      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d2:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0ee      	beq.n	80038bc <HAL_RCC_OscConfig+0x334>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e0:	f7fe fb3c 	bl	8001f5c <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e8:	f7fe fb38 	bl	8001f5c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e0b5      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fe:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1ee      	bne.n	80038e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003910:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	4a38      	ldr	r2, [pc, #224]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a1 	beq.w	8003a68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b08      	cmp	r3, #8
 8003930:	d05c      	beq.n	80039ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d141      	bne.n	80039be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCC_OscConfig+0x478>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe fb0c 	bl	8001f5c <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe fb08 	bl	8001f5c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e087      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	061b      	lsls	r3, r3, #24
 800398a:	491b      	ldr	r1, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7fe fae1 	bl	8001f5c <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399e:	f7fe fadd 	bl	8001f5c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e05c      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x416>
 80039bc:	e054      	b.n	8003a68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <HAL_RCC_OscConfig+0x478>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe faca 	bl	8001f5c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe fac6 	bl	8001f5c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e045      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x444>
 80039ea:	e03d      	b.n	8003a68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e038      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40007000 	.word	0x40007000
 8003a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <HAL_RCC_OscConfig+0x4ec>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d028      	beq.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d121      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d11a      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d111      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	085b      	lsrs	r3, r3, #1
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800

08003a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0cc      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b68      	ldr	r3, [pc, #416]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d90c      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b65      	ldr	r3, [pc, #404]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b63      	ldr	r3, [pc, #396]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0b8      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d020      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003acc:	4b59      	ldr	r3, [pc, #356]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a58      	ldr	r2, [pc, #352]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae4:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a52      	ldr	r2, [pc, #328]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af0:	4b50      	ldr	r3, [pc, #320]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	494d      	ldr	r1, [pc, #308]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d044      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d107      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b47      	ldr	r3, [pc, #284]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d119      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e07f      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b36:	4b3f      	ldr	r3, [pc, #252]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e06f      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b46:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e067      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b56:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4934      	ldr	r1, [pc, #208]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b68:	f7fe f9f8 	bl	8001f5c <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b70:	f7fe f9f4 	bl	8001f5c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e04f      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	4b2b      	ldr	r3, [pc, #172]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 020c 	and.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1eb      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b98:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d20c      	bcs.n	8003bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e032      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bcc:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4916      	ldr	r1, [pc, #88]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	490e      	ldr	r1, [pc, #56]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bfe:	f000 f821 	bl	8003c44 <HAL_RCC_GetSysClockFreq>
 8003c02:	4602      	mov	r2, r0
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	490a      	ldr	r1, [pc, #40]	; (8003c38 <HAL_RCC_ClockConfig+0x1c0>)
 8003c10:	5ccb      	ldrb	r3, [r1, r3]
 8003c12:	fa22 f303 	lsr.w	r3, r2, r3
 8003c16:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe f958 	bl	8001ed4 <HAL_InitTick>

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023c00 	.word	0x40023c00
 8003c34:	40023800 	.word	0x40023800
 8003c38:	08004fe4 	.word	0x08004fe4
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	20000004 	.word	0x20000004

08003c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c48:	b094      	sub	sp, #80	; 0x50
 8003c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c50:	2300      	movs	r3, #0
 8003c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c54:	2300      	movs	r3, #0
 8003c56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c5c:	4b79      	ldr	r3, [pc, #484]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d00d      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x40>
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	f200 80e1 	bhi.w	8003e30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x34>
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d003      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c76:	e0db      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c78:	4b73      	ldr	r3, [pc, #460]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c7c:	e0db      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c7e:	4b73      	ldr	r3, [pc, #460]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x208>)
 8003c80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c82:	e0d8      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c84:	4b6f      	ldr	r3, [pc, #444]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c8e:	4b6d      	ldr	r3, [pc, #436]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d063      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9a:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	099b      	lsrs	r3, r3, #6
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ca4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cac:	633b      	str	r3, [r7, #48]	; 0x30
 8003cae:	2300      	movs	r3, #0
 8003cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	462b      	mov	r3, r5
 8003cba:	f04f 0000 	mov.w	r0, #0
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	0159      	lsls	r1, r3, #5
 8003cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc8:	0150      	lsls	r0, r2, #5
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4621      	mov	r1, r4
 8003cd0:	1a51      	subs	r1, r2, r1
 8003cd2:	6139      	str	r1, [r7, #16]
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce8:	4659      	mov	r1, fp
 8003cea:	018b      	lsls	r3, r1, #6
 8003cec:	4651      	mov	r1, sl
 8003cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	018a      	lsls	r2, r1, #6
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	ebb2 0801 	subs.w	r8, r2, r1
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	eb63 0901 	sbc.w	r9, r3, r1
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d16:	4690      	mov	r8, r2
 8003d18:	4699      	mov	r9, r3
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	eb18 0303 	adds.w	r3, r8, r3
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	462b      	mov	r3, r5
 8003d24:	eb49 0303 	adc.w	r3, r9, r3
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d36:	4629      	mov	r1, r5
 8003d38:	024b      	lsls	r3, r1, #9
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d40:	4621      	mov	r1, r4
 8003d42:	024a      	lsls	r2, r1, #9
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d54:	f7fc feba 	bl	8000acc <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d60:	e058      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d62:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	099b      	lsrs	r3, r3, #6
 8003d68:	2200      	movs	r2, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d72:	623b      	str	r3, [r7, #32]
 8003d74:	2300      	movs	r3, #0
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
 8003d78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d7c:	4642      	mov	r2, r8
 8003d7e:	464b      	mov	r3, r9
 8003d80:	f04f 0000 	mov.w	r0, #0
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	0159      	lsls	r1, r3, #5
 8003d8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d8e:	0150      	lsls	r0, r2, #5
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4641      	mov	r1, r8
 8003d96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003db0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003db4:	ebb2 040a 	subs.w	r4, r2, sl
 8003db8:	eb63 050b 	sbc.w	r5, r3, fp
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	00eb      	lsls	r3, r5, #3
 8003dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dca:	00e2      	lsls	r2, r4, #3
 8003dcc:	4614      	mov	r4, r2
 8003dce:	461d      	mov	r5, r3
 8003dd0:	4643      	mov	r3, r8
 8003dd2:	18e3      	adds	r3, r4, r3
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	eb45 0303 	adc.w	r3, r5, r3
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dea:	4629      	mov	r1, r5
 8003dec:	028b      	lsls	r3, r1, #10
 8003dee:	4621      	mov	r1, r4
 8003df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003df4:	4621      	mov	r1, r4
 8003df6:	028a      	lsls	r2, r1, #10
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dfe:	2200      	movs	r2, #0
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	61fa      	str	r2, [r7, #28]
 8003e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e08:	f7fc fe60 	bl	8000acc <__aeabi_uldivmod>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4613      	mov	r3, r2
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	3301      	adds	r3, #1
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e2e:	e002      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3750      	adds	r7, #80	; 0x50
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	00f42400 	.word	0x00f42400
 8003e4c:	007a1200 	.word	0x007a1200

08003e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000000 	.word	0x20000000

08003e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e6c:	f7ff fff0 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	0a9b      	lsrs	r3, r3, #10
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4903      	ldr	r1, [pc, #12]	; (8003e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	08004ff4 	.word	0x08004ff4

08003e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e94:	f7ff ffdc 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	0b5b      	lsrs	r3, r3, #13
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4903      	ldr	r1, [pc, #12]	; (8003eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	08004ff4 	.word	0x08004ff4

08003eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e03f      	b.n	8003f4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd fa54 	bl	800138c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	; 0x24
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f929 	bl	8004154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b08a      	sub	sp, #40	; 0x28
 8003f56:	af02      	add	r7, sp, #8
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d17c      	bne.n	800406c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_UART_Transmit+0x2c>
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e075      	b.n	800406e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_UART_Transmit+0x3e>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e06e      	b.n	800406e <HAL_UART_Transmit+0x11c>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2221      	movs	r2, #33	; 0x21
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa6:	f7fd ffd9 	bl	8001f5c <HAL_GetTick>
 8003faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc0:	d108      	bne.n	8003fd4 <HAL_UART_Transmit+0x82>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d104      	bne.n	8003fd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e003      	b.n	8003fdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fe4:	e02a      	b.n	800403c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2200      	movs	r2, #0
 8003fee:	2180      	movs	r1, #128	; 0x80
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f840 	bl	8004076 <UART_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e036      	b.n	800406e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004014:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	3302      	adds	r3, #2
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	e007      	b.n	800402e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	781a      	ldrb	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	3301      	adds	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1cf      	bne.n	8003fe6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2200      	movs	r2, #0
 800404e:	2140      	movs	r1, #64	; 0x40
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f810 	bl	8004076 <UART_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e006      	b.n	800406e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b090      	sub	sp, #64	; 0x40
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	4613      	mov	r3, r2
 8004084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004086:	e050      	b.n	800412a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800408e:	d04c      	beq.n	800412a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004096:	f7fd ff61 	bl	8001f5c <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d241      	bcs.n	800412a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040c6:	637a      	str	r2, [r7, #52]	; 0x34
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e5      	bne.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3314      	adds	r3, #20
 80040e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3314      	adds	r3, #20
 80040f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040fa:	623a      	str	r2, [r7, #32]
 80040fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	69f9      	ldr	r1, [r7, #28]
 8004100:	6a3a      	ldr	r2, [r7, #32]
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	61bb      	str	r3, [r7, #24]
   return(result);
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e5      	bne.n	80040da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e00f      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4013      	ands	r3, r2
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	429a      	cmp	r2, r3
 8004138:	bf0c      	ite	eq
 800413a:	2301      	moveq	r3, #1
 800413c:	2300      	movne	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	429a      	cmp	r2, r3
 8004146:	d09f      	beq.n	8004088 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3740      	adds	r7, #64	; 0x40
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b0c0      	sub	sp, #256	; 0x100
 800415a:	af00      	add	r7, sp, #0
 800415c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004170:	68d9      	ldr	r1, [r3, #12]
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	ea40 0301 	orr.w	r3, r0, r1
 800417c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	431a      	orrs	r2, r3
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	431a      	orrs	r2, r3
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041ac:	f021 010c 	bic.w	r1, r1, #12
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041ba:	430b      	orrs	r3, r1
 80041bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ce:	6999      	ldr	r1, [r3, #24]
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	ea40 0301 	orr.w	r3, r0, r1
 80041da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b8f      	ldr	r3, [pc, #572]	; (8004420 <UART_SetConfig+0x2cc>)
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d005      	beq.n	80041f4 <UART_SetConfig+0xa0>
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b8d      	ldr	r3, [pc, #564]	; (8004424 <UART_SetConfig+0x2d0>)
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d104      	bne.n	80041fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041f4:	f7ff fe4c 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 80041f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041fc:	e003      	b.n	8004206 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041fe:	f7ff fe33 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8004202:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004210:	f040 810c 	bne.w	800442c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800421e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004222:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004226:	4622      	mov	r2, r4
 8004228:	462b      	mov	r3, r5
 800422a:	1891      	adds	r1, r2, r2
 800422c:	65b9      	str	r1, [r7, #88]	; 0x58
 800422e:	415b      	adcs	r3, r3
 8004230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004236:	4621      	mov	r1, r4
 8004238:	eb12 0801 	adds.w	r8, r2, r1
 800423c:	4629      	mov	r1, r5
 800423e:	eb43 0901 	adc.w	r9, r3, r1
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800424e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004256:	4690      	mov	r8, r2
 8004258:	4699      	mov	r9, r3
 800425a:	4623      	mov	r3, r4
 800425c:	eb18 0303 	adds.w	r3, r8, r3
 8004260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004264:	462b      	mov	r3, r5
 8004266:	eb49 0303 	adc.w	r3, r9, r3
 800426a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800427a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800427e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004282:	460b      	mov	r3, r1
 8004284:	18db      	adds	r3, r3, r3
 8004286:	653b      	str	r3, [r7, #80]	; 0x50
 8004288:	4613      	mov	r3, r2
 800428a:	eb42 0303 	adc.w	r3, r2, r3
 800428e:	657b      	str	r3, [r7, #84]	; 0x54
 8004290:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004294:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004298:	f7fc fc18 	bl	8000acc <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4b61      	ldr	r3, [pc, #388]	; (8004428 <UART_SetConfig+0x2d4>)
 80042a2:	fba3 2302 	umull	r2, r3, r3, r2
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	011c      	lsls	r4, r3, #4
 80042aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042bc:	4642      	mov	r2, r8
 80042be:	464b      	mov	r3, r9
 80042c0:	1891      	adds	r1, r2, r2
 80042c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80042c4:	415b      	adcs	r3, r3
 80042c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042cc:	4641      	mov	r1, r8
 80042ce:	eb12 0a01 	adds.w	sl, r2, r1
 80042d2:	4649      	mov	r1, r9
 80042d4:	eb43 0b01 	adc.w	fp, r3, r1
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ec:	4692      	mov	sl, r2
 80042ee:	469b      	mov	fp, r3
 80042f0:	4643      	mov	r3, r8
 80042f2:	eb1a 0303 	adds.w	r3, sl, r3
 80042f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042fa:	464b      	mov	r3, r9
 80042fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004310:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004314:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004318:	460b      	mov	r3, r1
 800431a:	18db      	adds	r3, r3, r3
 800431c:	643b      	str	r3, [r7, #64]	; 0x40
 800431e:	4613      	mov	r3, r2
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	647b      	str	r3, [r7, #68]	; 0x44
 8004326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800432a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800432e:	f7fc fbcd 	bl	8000acc <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4611      	mov	r1, r2
 8004338:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <UART_SetConfig+0x2d4>)
 800433a:	fba3 2301 	umull	r2, r3, r3, r1
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2264      	movs	r2, #100	; 0x64
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	1acb      	subs	r3, r1, r3
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800434e:	4b36      	ldr	r3, [pc, #216]	; (8004428 <UART_SetConfig+0x2d4>)
 8004350:	fba3 2302 	umull	r2, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800435c:	441c      	add	r4, r3
 800435e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004362:	2200      	movs	r2, #0
 8004364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004368:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800436c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	1891      	adds	r1, r2, r2
 8004376:	63b9      	str	r1, [r7, #56]	; 0x38
 8004378:	415b      	adcs	r3, r3
 800437a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800437c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004380:	4641      	mov	r1, r8
 8004382:	1851      	adds	r1, r2, r1
 8004384:	6339      	str	r1, [r7, #48]	; 0x30
 8004386:	4649      	mov	r1, r9
 8004388:	414b      	adcs	r3, r1
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004398:	4659      	mov	r1, fp
 800439a:	00cb      	lsls	r3, r1, #3
 800439c:	4651      	mov	r1, sl
 800439e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043a2:	4651      	mov	r1, sl
 80043a4:	00ca      	lsls	r2, r1, #3
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	4642      	mov	r2, r8
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043b4:	464b      	mov	r3, r9
 80043b6:	460a      	mov	r2, r1
 80043b8:	eb42 0303 	adc.w	r3, r2, r3
 80043bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043d4:	460b      	mov	r3, r1
 80043d6:	18db      	adds	r3, r3, r3
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043da:	4613      	mov	r3, r2
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043ea:	f7fc fb6f 	bl	8000acc <__aeabi_uldivmod>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <UART_SetConfig+0x2d4>)
 80043f4:	fba3 1302 	umull	r1, r3, r3, r2
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	2164      	movs	r1, #100	; 0x64
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	3332      	adds	r3, #50	; 0x32
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <UART_SetConfig+0x2d4>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	f003 0207 	and.w	r2, r3, #7
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4422      	add	r2, r4
 800441a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800441c:	e105      	b.n	800462a <UART_SetConfig+0x4d6>
 800441e:	bf00      	nop
 8004420:	40011000 	.word	0x40011000
 8004424:	40011400 	.word	0x40011400
 8004428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800442c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004430:	2200      	movs	r2, #0
 8004432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800443a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800443e:	4642      	mov	r2, r8
 8004440:	464b      	mov	r3, r9
 8004442:	1891      	adds	r1, r2, r2
 8004444:	6239      	str	r1, [r7, #32]
 8004446:	415b      	adcs	r3, r3
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
 800444a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800444e:	4641      	mov	r1, r8
 8004450:	1854      	adds	r4, r2, r1
 8004452:	4649      	mov	r1, r9
 8004454:	eb43 0501 	adc.w	r5, r3, r1
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	00eb      	lsls	r3, r5, #3
 8004462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004466:	00e2      	lsls	r2, r4, #3
 8004468:	4614      	mov	r4, r2
 800446a:	461d      	mov	r5, r3
 800446c:	4643      	mov	r3, r8
 800446e:	18e3      	adds	r3, r4, r3
 8004470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004474:	464b      	mov	r3, r9
 8004476:	eb45 0303 	adc.w	r3, r5, r3
 800447a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800448a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800449a:	4629      	mov	r1, r5
 800449c:	008b      	lsls	r3, r1, #2
 800449e:	4621      	mov	r1, r4
 80044a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a4:	4621      	mov	r1, r4
 80044a6:	008a      	lsls	r2, r1, #2
 80044a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044ac:	f7fc fb0e 	bl	8000acc <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4b60      	ldr	r3, [pc, #384]	; (8004638 <UART_SetConfig+0x4e4>)
 80044b6:	fba3 2302 	umull	r2, r3, r3, r2
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	011c      	lsls	r4, r3, #4
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	61b9      	str	r1, [r7, #24]
 80044d8:	415b      	adcs	r3, r3
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044e0:	4641      	mov	r1, r8
 80044e2:	1851      	adds	r1, r2, r1
 80044e4:	6139      	str	r1, [r7, #16]
 80044e6:	4649      	mov	r1, r9
 80044e8:	414b      	adcs	r3, r1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044f8:	4659      	mov	r1, fp
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	4651      	mov	r1, sl
 80044fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004502:	4651      	mov	r1, sl
 8004504:	00ca      	lsls	r2, r1, #3
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	4603      	mov	r3, r0
 800450c:	4642      	mov	r2, r8
 800450e:	189b      	adds	r3, r3, r2
 8004510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004514:	464b      	mov	r3, r9
 8004516:	460a      	mov	r2, r1
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	67bb      	str	r3, [r7, #120]	; 0x78
 800452a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004538:	4649      	mov	r1, r9
 800453a:	008b      	lsls	r3, r1, #2
 800453c:	4641      	mov	r1, r8
 800453e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004542:	4641      	mov	r1, r8
 8004544:	008a      	lsls	r2, r1, #2
 8004546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800454a:	f7fc fabf 	bl	8000acc <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4b39      	ldr	r3, [pc, #228]	; (8004638 <UART_SetConfig+0x4e4>)
 8004554:	fba3 1302 	umull	r1, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	2164      	movs	r1, #100	; 0x64
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	3332      	adds	r3, #50	; 0x32
 8004566:	4a34      	ldr	r2, [pc, #208]	; (8004638 <UART_SetConfig+0x4e4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004572:	441c      	add	r4, r3
 8004574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004578:	2200      	movs	r2, #0
 800457a:	673b      	str	r3, [r7, #112]	; 0x70
 800457c:	677a      	str	r2, [r7, #116]	; 0x74
 800457e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004582:	4642      	mov	r2, r8
 8004584:	464b      	mov	r3, r9
 8004586:	1891      	adds	r1, r2, r2
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	415b      	adcs	r3, r3
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004592:	4641      	mov	r1, r8
 8004594:	1851      	adds	r1, r2, r1
 8004596:	6039      	str	r1, [r7, #0]
 8004598:	4649      	mov	r1, r9
 800459a:	414b      	adcs	r3, r1
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045aa:	4659      	mov	r1, fp
 80045ac:	00cb      	lsls	r3, r1, #3
 80045ae:	4651      	mov	r1, sl
 80045b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b4:	4651      	mov	r1, sl
 80045b6:	00ca      	lsls	r2, r1, #3
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	4603      	mov	r3, r0
 80045be:	4642      	mov	r2, r8
 80045c0:	189b      	adds	r3, r3, r2
 80045c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045c4:	464b      	mov	r3, r9
 80045c6:	460a      	mov	r2, r1
 80045c8:	eb42 0303 	adc.w	r3, r2, r3
 80045cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	663b      	str	r3, [r7, #96]	; 0x60
 80045d8:	667a      	str	r2, [r7, #100]	; 0x64
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045e6:	4649      	mov	r1, r9
 80045e8:	008b      	lsls	r3, r1, #2
 80045ea:	4641      	mov	r1, r8
 80045ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045f0:	4641      	mov	r1, r8
 80045f2:	008a      	lsls	r2, r1, #2
 80045f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045f8:	f7fc fa68 	bl	8000acc <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <UART_SetConfig+0x4e4>)
 8004602:	fba3 1302 	umull	r1, r3, r3, r2
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2164      	movs	r1, #100	; 0x64
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	3332      	adds	r3, #50	; 0x32
 8004614:	4a08      	ldr	r2, [pc, #32]	; (8004638 <UART_SetConfig+0x4e4>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	f003 020f 	and.w	r2, r3, #15
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4422      	add	r2, r4
 8004628:	609a      	str	r2, [r3, #8]
}
 800462a:	bf00      	nop
 800462c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004630:	46bd      	mov	sp, r7
 8004632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004636:	bf00      	nop
 8004638:	51eb851f 	.word	0x51eb851f

0800463c <__errno>:
 800463c:	4b01      	ldr	r3, [pc, #4]	; (8004644 <__errno+0x8>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	2000000c 	.word	0x2000000c

08004648 <__libc_init_array>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	4d0d      	ldr	r5, [pc, #52]	; (8004680 <__libc_init_array+0x38>)
 800464c:	4c0d      	ldr	r4, [pc, #52]	; (8004684 <__libc_init_array+0x3c>)
 800464e:	1b64      	subs	r4, r4, r5
 8004650:	10a4      	asrs	r4, r4, #2
 8004652:	2600      	movs	r6, #0
 8004654:	42a6      	cmp	r6, r4
 8004656:	d109      	bne.n	800466c <__libc_init_array+0x24>
 8004658:	4d0b      	ldr	r5, [pc, #44]	; (8004688 <__libc_init_array+0x40>)
 800465a:	4c0c      	ldr	r4, [pc, #48]	; (800468c <__libc_init_array+0x44>)
 800465c:	f000 fc8e 	bl	8004f7c <_init>
 8004660:	1b64      	subs	r4, r4, r5
 8004662:	10a4      	asrs	r4, r4, #2
 8004664:	2600      	movs	r6, #0
 8004666:	42a6      	cmp	r6, r4
 8004668:	d105      	bne.n	8004676 <__libc_init_array+0x2e>
 800466a:	bd70      	pop	{r4, r5, r6, pc}
 800466c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004670:	4798      	blx	r3
 8004672:	3601      	adds	r6, #1
 8004674:	e7ee      	b.n	8004654 <__libc_init_array+0xc>
 8004676:	f855 3b04 	ldr.w	r3, [r5], #4
 800467a:	4798      	blx	r3
 800467c:	3601      	adds	r6, #1
 800467e:	e7f2      	b.n	8004666 <__libc_init_array+0x1e>
 8004680:	08005038 	.word	0x08005038
 8004684:	08005038 	.word	0x08005038
 8004688:	08005038 	.word	0x08005038
 800468c:	0800503c 	.word	0x0800503c

08004690 <memset>:
 8004690:	4402      	add	r2, r0
 8004692:	4603      	mov	r3, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <siprintf>:
 80046a0:	b40e      	push	{r1, r2, r3}
 80046a2:	b500      	push	{lr}
 80046a4:	b09c      	sub	sp, #112	; 0x70
 80046a6:	ab1d      	add	r3, sp, #116	; 0x74
 80046a8:	9002      	str	r0, [sp, #8]
 80046aa:	9006      	str	r0, [sp, #24]
 80046ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046b0:	4809      	ldr	r0, [pc, #36]	; (80046d8 <siprintf+0x38>)
 80046b2:	9107      	str	r1, [sp, #28]
 80046b4:	9104      	str	r1, [sp, #16]
 80046b6:	4909      	ldr	r1, [pc, #36]	; (80046dc <siprintf+0x3c>)
 80046b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80046bc:	9105      	str	r1, [sp, #20]
 80046be:	6800      	ldr	r0, [r0, #0]
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	a902      	add	r1, sp, #8
 80046c4:	f000 f868 	bl	8004798 <_svfiprintf_r>
 80046c8:	9b02      	ldr	r3, [sp, #8]
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	b01c      	add	sp, #112	; 0x70
 80046d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046d4:	b003      	add	sp, #12
 80046d6:	4770      	bx	lr
 80046d8:	2000000c 	.word	0x2000000c
 80046dc:	ffff0208 	.word	0xffff0208

080046e0 <__ssputs_r>:
 80046e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	688e      	ldr	r6, [r1, #8]
 80046e6:	429e      	cmp	r6, r3
 80046e8:	4682      	mov	sl, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	4690      	mov	r8, r2
 80046ee:	461f      	mov	r7, r3
 80046f0:	d838      	bhi.n	8004764 <__ssputs_r+0x84>
 80046f2:	898a      	ldrh	r2, [r1, #12]
 80046f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046f8:	d032      	beq.n	8004760 <__ssputs_r+0x80>
 80046fa:	6825      	ldr	r5, [r4, #0]
 80046fc:	6909      	ldr	r1, [r1, #16]
 80046fe:	eba5 0901 	sub.w	r9, r5, r1
 8004702:	6965      	ldr	r5, [r4, #20]
 8004704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004708:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800470c:	3301      	adds	r3, #1
 800470e:	444b      	add	r3, r9
 8004710:	106d      	asrs	r5, r5, #1
 8004712:	429d      	cmp	r5, r3
 8004714:	bf38      	it	cc
 8004716:	461d      	movcc	r5, r3
 8004718:	0553      	lsls	r3, r2, #21
 800471a:	d531      	bpl.n	8004780 <__ssputs_r+0xa0>
 800471c:	4629      	mov	r1, r5
 800471e:	f000 fb63 	bl	8004de8 <_malloc_r>
 8004722:	4606      	mov	r6, r0
 8004724:	b950      	cbnz	r0, 800473c <__ssputs_r+0x5c>
 8004726:	230c      	movs	r3, #12
 8004728:	f8ca 3000 	str.w	r3, [sl]
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004732:	81a3      	strh	r3, [r4, #12]
 8004734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800473c:	6921      	ldr	r1, [r4, #16]
 800473e:	464a      	mov	r2, r9
 8004740:	f000 fabe 	bl	8004cc0 <memcpy>
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800474a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474e:	81a3      	strh	r3, [r4, #12]
 8004750:	6126      	str	r6, [r4, #16]
 8004752:	6165      	str	r5, [r4, #20]
 8004754:	444e      	add	r6, r9
 8004756:	eba5 0509 	sub.w	r5, r5, r9
 800475a:	6026      	str	r6, [r4, #0]
 800475c:	60a5      	str	r5, [r4, #8]
 800475e:	463e      	mov	r6, r7
 8004760:	42be      	cmp	r6, r7
 8004762:	d900      	bls.n	8004766 <__ssputs_r+0x86>
 8004764:	463e      	mov	r6, r7
 8004766:	6820      	ldr	r0, [r4, #0]
 8004768:	4632      	mov	r2, r6
 800476a:	4641      	mov	r1, r8
 800476c:	f000 fab6 	bl	8004cdc <memmove>
 8004770:	68a3      	ldr	r3, [r4, #8]
 8004772:	1b9b      	subs	r3, r3, r6
 8004774:	60a3      	str	r3, [r4, #8]
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	4433      	add	r3, r6
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	2000      	movs	r0, #0
 800477e:	e7db      	b.n	8004738 <__ssputs_r+0x58>
 8004780:	462a      	mov	r2, r5
 8004782:	f000 fba5 	bl	8004ed0 <_realloc_r>
 8004786:	4606      	mov	r6, r0
 8004788:	2800      	cmp	r0, #0
 800478a:	d1e1      	bne.n	8004750 <__ssputs_r+0x70>
 800478c:	6921      	ldr	r1, [r4, #16]
 800478e:	4650      	mov	r0, sl
 8004790:	f000 fabe 	bl	8004d10 <_free_r>
 8004794:	e7c7      	b.n	8004726 <__ssputs_r+0x46>
	...

08004798 <_svfiprintf_r>:
 8004798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479c:	4698      	mov	r8, r3
 800479e:	898b      	ldrh	r3, [r1, #12]
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	b09d      	sub	sp, #116	; 0x74
 80047a4:	4607      	mov	r7, r0
 80047a6:	460d      	mov	r5, r1
 80047a8:	4614      	mov	r4, r2
 80047aa:	d50e      	bpl.n	80047ca <_svfiprintf_r+0x32>
 80047ac:	690b      	ldr	r3, [r1, #16]
 80047ae:	b963      	cbnz	r3, 80047ca <_svfiprintf_r+0x32>
 80047b0:	2140      	movs	r1, #64	; 0x40
 80047b2:	f000 fb19 	bl	8004de8 <_malloc_r>
 80047b6:	6028      	str	r0, [r5, #0]
 80047b8:	6128      	str	r0, [r5, #16]
 80047ba:	b920      	cbnz	r0, 80047c6 <_svfiprintf_r+0x2e>
 80047bc:	230c      	movs	r3, #12
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047c4:	e0d1      	b.n	800496a <_svfiprintf_r+0x1d2>
 80047c6:	2340      	movs	r3, #64	; 0x40
 80047c8:	616b      	str	r3, [r5, #20]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9309      	str	r3, [sp, #36]	; 0x24
 80047ce:	2320      	movs	r3, #32
 80047d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80047d8:	2330      	movs	r3, #48	; 0x30
 80047da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004984 <_svfiprintf_r+0x1ec>
 80047de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047e2:	f04f 0901 	mov.w	r9, #1
 80047e6:	4623      	mov	r3, r4
 80047e8:	469a      	mov	sl, r3
 80047ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ee:	b10a      	cbz	r2, 80047f4 <_svfiprintf_r+0x5c>
 80047f0:	2a25      	cmp	r2, #37	; 0x25
 80047f2:	d1f9      	bne.n	80047e8 <_svfiprintf_r+0x50>
 80047f4:	ebba 0b04 	subs.w	fp, sl, r4
 80047f8:	d00b      	beq.n	8004812 <_svfiprintf_r+0x7a>
 80047fa:	465b      	mov	r3, fp
 80047fc:	4622      	mov	r2, r4
 80047fe:	4629      	mov	r1, r5
 8004800:	4638      	mov	r0, r7
 8004802:	f7ff ff6d 	bl	80046e0 <__ssputs_r>
 8004806:	3001      	adds	r0, #1
 8004808:	f000 80aa 	beq.w	8004960 <_svfiprintf_r+0x1c8>
 800480c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800480e:	445a      	add	r2, fp
 8004810:	9209      	str	r2, [sp, #36]	; 0x24
 8004812:	f89a 3000 	ldrb.w	r3, [sl]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80a2 	beq.w	8004960 <_svfiprintf_r+0x1c8>
 800481c:	2300      	movs	r3, #0
 800481e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004826:	f10a 0a01 	add.w	sl, sl, #1
 800482a:	9304      	str	r3, [sp, #16]
 800482c:	9307      	str	r3, [sp, #28]
 800482e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004832:	931a      	str	r3, [sp, #104]	; 0x68
 8004834:	4654      	mov	r4, sl
 8004836:	2205      	movs	r2, #5
 8004838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800483c:	4851      	ldr	r0, [pc, #324]	; (8004984 <_svfiprintf_r+0x1ec>)
 800483e:	f7fb fcd7 	bl	80001f0 <memchr>
 8004842:	9a04      	ldr	r2, [sp, #16]
 8004844:	b9d8      	cbnz	r0, 800487e <_svfiprintf_r+0xe6>
 8004846:	06d0      	lsls	r0, r2, #27
 8004848:	bf44      	itt	mi
 800484a:	2320      	movmi	r3, #32
 800484c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004850:	0711      	lsls	r1, r2, #28
 8004852:	bf44      	itt	mi
 8004854:	232b      	movmi	r3, #43	; 0x2b
 8004856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800485a:	f89a 3000 	ldrb.w	r3, [sl]
 800485e:	2b2a      	cmp	r3, #42	; 0x2a
 8004860:	d015      	beq.n	800488e <_svfiprintf_r+0xf6>
 8004862:	9a07      	ldr	r2, [sp, #28]
 8004864:	4654      	mov	r4, sl
 8004866:	2000      	movs	r0, #0
 8004868:	f04f 0c0a 	mov.w	ip, #10
 800486c:	4621      	mov	r1, r4
 800486e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004872:	3b30      	subs	r3, #48	; 0x30
 8004874:	2b09      	cmp	r3, #9
 8004876:	d94e      	bls.n	8004916 <_svfiprintf_r+0x17e>
 8004878:	b1b0      	cbz	r0, 80048a8 <_svfiprintf_r+0x110>
 800487a:	9207      	str	r2, [sp, #28]
 800487c:	e014      	b.n	80048a8 <_svfiprintf_r+0x110>
 800487e:	eba0 0308 	sub.w	r3, r0, r8
 8004882:	fa09 f303 	lsl.w	r3, r9, r3
 8004886:	4313      	orrs	r3, r2
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	46a2      	mov	sl, r4
 800488c:	e7d2      	b.n	8004834 <_svfiprintf_r+0x9c>
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	1d19      	adds	r1, r3, #4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	9103      	str	r1, [sp, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	bfbb      	ittet	lt
 800489a:	425b      	neglt	r3, r3
 800489c:	f042 0202 	orrlt.w	r2, r2, #2
 80048a0:	9307      	strge	r3, [sp, #28]
 80048a2:	9307      	strlt	r3, [sp, #28]
 80048a4:	bfb8      	it	lt
 80048a6:	9204      	strlt	r2, [sp, #16]
 80048a8:	7823      	ldrb	r3, [r4, #0]
 80048aa:	2b2e      	cmp	r3, #46	; 0x2e
 80048ac:	d10c      	bne.n	80048c8 <_svfiprintf_r+0x130>
 80048ae:	7863      	ldrb	r3, [r4, #1]
 80048b0:	2b2a      	cmp	r3, #42	; 0x2a
 80048b2:	d135      	bne.n	8004920 <_svfiprintf_r+0x188>
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	1d1a      	adds	r2, r3, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	9203      	str	r2, [sp, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bfb8      	it	lt
 80048c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048c4:	3402      	adds	r4, #2
 80048c6:	9305      	str	r3, [sp, #20]
 80048c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004994 <_svfiprintf_r+0x1fc>
 80048cc:	7821      	ldrb	r1, [r4, #0]
 80048ce:	2203      	movs	r2, #3
 80048d0:	4650      	mov	r0, sl
 80048d2:	f7fb fc8d 	bl	80001f0 <memchr>
 80048d6:	b140      	cbz	r0, 80048ea <_svfiprintf_r+0x152>
 80048d8:	2340      	movs	r3, #64	; 0x40
 80048da:	eba0 000a 	sub.w	r0, r0, sl
 80048de:	fa03 f000 	lsl.w	r0, r3, r0
 80048e2:	9b04      	ldr	r3, [sp, #16]
 80048e4:	4303      	orrs	r3, r0
 80048e6:	3401      	adds	r4, #1
 80048e8:	9304      	str	r3, [sp, #16]
 80048ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ee:	4826      	ldr	r0, [pc, #152]	; (8004988 <_svfiprintf_r+0x1f0>)
 80048f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048f4:	2206      	movs	r2, #6
 80048f6:	f7fb fc7b 	bl	80001f0 <memchr>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d038      	beq.n	8004970 <_svfiprintf_r+0x1d8>
 80048fe:	4b23      	ldr	r3, [pc, #140]	; (800498c <_svfiprintf_r+0x1f4>)
 8004900:	bb1b      	cbnz	r3, 800494a <_svfiprintf_r+0x1b2>
 8004902:	9b03      	ldr	r3, [sp, #12]
 8004904:	3307      	adds	r3, #7
 8004906:	f023 0307 	bic.w	r3, r3, #7
 800490a:	3308      	adds	r3, #8
 800490c:	9303      	str	r3, [sp, #12]
 800490e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004910:	4433      	add	r3, r6
 8004912:	9309      	str	r3, [sp, #36]	; 0x24
 8004914:	e767      	b.n	80047e6 <_svfiprintf_r+0x4e>
 8004916:	fb0c 3202 	mla	r2, ip, r2, r3
 800491a:	460c      	mov	r4, r1
 800491c:	2001      	movs	r0, #1
 800491e:	e7a5      	b.n	800486c <_svfiprintf_r+0xd4>
 8004920:	2300      	movs	r3, #0
 8004922:	3401      	adds	r4, #1
 8004924:	9305      	str	r3, [sp, #20]
 8004926:	4619      	mov	r1, r3
 8004928:	f04f 0c0a 	mov.w	ip, #10
 800492c:	4620      	mov	r0, r4
 800492e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004932:	3a30      	subs	r2, #48	; 0x30
 8004934:	2a09      	cmp	r2, #9
 8004936:	d903      	bls.n	8004940 <_svfiprintf_r+0x1a8>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0c5      	beq.n	80048c8 <_svfiprintf_r+0x130>
 800493c:	9105      	str	r1, [sp, #20]
 800493e:	e7c3      	b.n	80048c8 <_svfiprintf_r+0x130>
 8004940:	fb0c 2101 	mla	r1, ip, r1, r2
 8004944:	4604      	mov	r4, r0
 8004946:	2301      	movs	r3, #1
 8004948:	e7f0      	b.n	800492c <_svfiprintf_r+0x194>
 800494a:	ab03      	add	r3, sp, #12
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	462a      	mov	r2, r5
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <_svfiprintf_r+0x1f8>)
 8004952:	a904      	add	r1, sp, #16
 8004954:	4638      	mov	r0, r7
 8004956:	f3af 8000 	nop.w
 800495a:	1c42      	adds	r2, r0, #1
 800495c:	4606      	mov	r6, r0
 800495e:	d1d6      	bne.n	800490e <_svfiprintf_r+0x176>
 8004960:	89ab      	ldrh	r3, [r5, #12]
 8004962:	065b      	lsls	r3, r3, #25
 8004964:	f53f af2c 	bmi.w	80047c0 <_svfiprintf_r+0x28>
 8004968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800496a:	b01d      	add	sp, #116	; 0x74
 800496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004970:	ab03      	add	r3, sp, #12
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	462a      	mov	r2, r5
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <_svfiprintf_r+0x1f8>)
 8004978:	a904      	add	r1, sp, #16
 800497a:	4638      	mov	r0, r7
 800497c:	f000 f87a 	bl	8004a74 <_printf_i>
 8004980:	e7eb      	b.n	800495a <_svfiprintf_r+0x1c2>
 8004982:	bf00      	nop
 8004984:	08004ffc 	.word	0x08004ffc
 8004988:	08005006 	.word	0x08005006
 800498c:	00000000 	.word	0x00000000
 8004990:	080046e1 	.word	0x080046e1
 8004994:	08005002 	.word	0x08005002

08004998 <_printf_common>:
 8004998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800499c:	4616      	mov	r6, r2
 800499e:	4699      	mov	r9, r3
 80049a0:	688a      	ldr	r2, [r1, #8]
 80049a2:	690b      	ldr	r3, [r1, #16]
 80049a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049a8:	4293      	cmp	r3, r2
 80049aa:	bfb8      	it	lt
 80049ac:	4613      	movlt	r3, r2
 80049ae:	6033      	str	r3, [r6, #0]
 80049b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049b4:	4607      	mov	r7, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	b10a      	cbz	r2, 80049be <_printf_common+0x26>
 80049ba:	3301      	adds	r3, #1
 80049bc:	6033      	str	r3, [r6, #0]
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	0699      	lsls	r1, r3, #26
 80049c2:	bf42      	ittt	mi
 80049c4:	6833      	ldrmi	r3, [r6, #0]
 80049c6:	3302      	addmi	r3, #2
 80049c8:	6033      	strmi	r3, [r6, #0]
 80049ca:	6825      	ldr	r5, [r4, #0]
 80049cc:	f015 0506 	ands.w	r5, r5, #6
 80049d0:	d106      	bne.n	80049e0 <_printf_common+0x48>
 80049d2:	f104 0a19 	add.w	sl, r4, #25
 80049d6:	68e3      	ldr	r3, [r4, #12]
 80049d8:	6832      	ldr	r2, [r6, #0]
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	42ab      	cmp	r3, r5
 80049de:	dc26      	bgt.n	8004a2e <_printf_common+0x96>
 80049e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049e4:	1e13      	subs	r3, r2, #0
 80049e6:	6822      	ldr	r2, [r4, #0]
 80049e8:	bf18      	it	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	0692      	lsls	r2, r2, #26
 80049ee:	d42b      	bmi.n	8004a48 <_printf_common+0xb0>
 80049f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049f4:	4649      	mov	r1, r9
 80049f6:	4638      	mov	r0, r7
 80049f8:	47c0      	blx	r8
 80049fa:	3001      	adds	r0, #1
 80049fc:	d01e      	beq.n	8004a3c <_printf_common+0xa4>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	68e5      	ldr	r5, [r4, #12]
 8004a02:	6832      	ldr	r2, [r6, #0]
 8004a04:	f003 0306 	and.w	r3, r3, #6
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	bf08      	it	eq
 8004a0c:	1aad      	subeq	r5, r5, r2
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	6922      	ldr	r2, [r4, #16]
 8004a12:	bf0c      	ite	eq
 8004a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a18:	2500      	movne	r5, #0
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	bfc4      	itt	gt
 8004a1e:	1a9b      	subgt	r3, r3, r2
 8004a20:	18ed      	addgt	r5, r5, r3
 8004a22:	2600      	movs	r6, #0
 8004a24:	341a      	adds	r4, #26
 8004a26:	42b5      	cmp	r5, r6
 8004a28:	d11a      	bne.n	8004a60 <_printf_common+0xc8>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e008      	b.n	8004a40 <_printf_common+0xa8>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	4652      	mov	r2, sl
 8004a32:	4649      	mov	r1, r9
 8004a34:	4638      	mov	r0, r7
 8004a36:	47c0      	blx	r8
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d103      	bne.n	8004a44 <_printf_common+0xac>
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a44:	3501      	adds	r5, #1
 8004a46:	e7c6      	b.n	80049d6 <_printf_common+0x3e>
 8004a48:	18e1      	adds	r1, r4, r3
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	2030      	movs	r0, #48	; 0x30
 8004a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a52:	4422      	add	r2, r4
 8004a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a5c:	3302      	adds	r3, #2
 8004a5e:	e7c7      	b.n	80049f0 <_printf_common+0x58>
 8004a60:	2301      	movs	r3, #1
 8004a62:	4622      	mov	r2, r4
 8004a64:	4649      	mov	r1, r9
 8004a66:	4638      	mov	r0, r7
 8004a68:	47c0      	blx	r8
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d0e6      	beq.n	8004a3c <_printf_common+0xa4>
 8004a6e:	3601      	adds	r6, #1
 8004a70:	e7d9      	b.n	8004a26 <_printf_common+0x8e>
	...

08004a74 <_printf_i>:
 8004a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a78:	7e0f      	ldrb	r7, [r1, #24]
 8004a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a7c:	2f78      	cmp	r7, #120	; 0x78
 8004a7e:	4691      	mov	r9, r2
 8004a80:	4680      	mov	r8, r0
 8004a82:	460c      	mov	r4, r1
 8004a84:	469a      	mov	sl, r3
 8004a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a8a:	d807      	bhi.n	8004a9c <_printf_i+0x28>
 8004a8c:	2f62      	cmp	r7, #98	; 0x62
 8004a8e:	d80a      	bhi.n	8004aa6 <_printf_i+0x32>
 8004a90:	2f00      	cmp	r7, #0
 8004a92:	f000 80d8 	beq.w	8004c46 <_printf_i+0x1d2>
 8004a96:	2f58      	cmp	r7, #88	; 0x58
 8004a98:	f000 80a3 	beq.w	8004be2 <_printf_i+0x16e>
 8004a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004aa4:	e03a      	b.n	8004b1c <_printf_i+0xa8>
 8004aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aaa:	2b15      	cmp	r3, #21
 8004aac:	d8f6      	bhi.n	8004a9c <_printf_i+0x28>
 8004aae:	a101      	add	r1, pc, #4	; (adr r1, 8004ab4 <_printf_i+0x40>)
 8004ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ab4:	08004b0d 	.word	0x08004b0d
 8004ab8:	08004b21 	.word	0x08004b21
 8004abc:	08004a9d 	.word	0x08004a9d
 8004ac0:	08004a9d 	.word	0x08004a9d
 8004ac4:	08004a9d 	.word	0x08004a9d
 8004ac8:	08004a9d 	.word	0x08004a9d
 8004acc:	08004b21 	.word	0x08004b21
 8004ad0:	08004a9d 	.word	0x08004a9d
 8004ad4:	08004a9d 	.word	0x08004a9d
 8004ad8:	08004a9d 	.word	0x08004a9d
 8004adc:	08004a9d 	.word	0x08004a9d
 8004ae0:	08004c2d 	.word	0x08004c2d
 8004ae4:	08004b51 	.word	0x08004b51
 8004ae8:	08004c0f 	.word	0x08004c0f
 8004aec:	08004a9d 	.word	0x08004a9d
 8004af0:	08004a9d 	.word	0x08004a9d
 8004af4:	08004c4f 	.word	0x08004c4f
 8004af8:	08004a9d 	.word	0x08004a9d
 8004afc:	08004b51 	.word	0x08004b51
 8004b00:	08004a9d 	.word	0x08004a9d
 8004b04:	08004a9d 	.word	0x08004a9d
 8004b08:	08004c17 	.word	0x08004c17
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	1d1a      	adds	r2, r3, #4
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	602a      	str	r2, [r5, #0]
 8004b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0a3      	b.n	8004c68 <_printf_i+0x1f4>
 8004b20:	6820      	ldr	r0, [r4, #0]
 8004b22:	6829      	ldr	r1, [r5, #0]
 8004b24:	0606      	lsls	r6, r0, #24
 8004b26:	f101 0304 	add.w	r3, r1, #4
 8004b2a:	d50a      	bpl.n	8004b42 <_printf_i+0xce>
 8004b2c:	680e      	ldr	r6, [r1, #0]
 8004b2e:	602b      	str	r3, [r5, #0]
 8004b30:	2e00      	cmp	r6, #0
 8004b32:	da03      	bge.n	8004b3c <_printf_i+0xc8>
 8004b34:	232d      	movs	r3, #45	; 0x2d
 8004b36:	4276      	negs	r6, r6
 8004b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b3c:	485e      	ldr	r0, [pc, #376]	; (8004cb8 <_printf_i+0x244>)
 8004b3e:	230a      	movs	r3, #10
 8004b40:	e019      	b.n	8004b76 <_printf_i+0x102>
 8004b42:	680e      	ldr	r6, [r1, #0]
 8004b44:	602b      	str	r3, [r5, #0]
 8004b46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b4a:	bf18      	it	ne
 8004b4c:	b236      	sxthne	r6, r6
 8004b4e:	e7ef      	b.n	8004b30 <_printf_i+0xbc>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	6820      	ldr	r0, [r4, #0]
 8004b54:	1d19      	adds	r1, r3, #4
 8004b56:	6029      	str	r1, [r5, #0]
 8004b58:	0601      	lsls	r1, r0, #24
 8004b5a:	d501      	bpl.n	8004b60 <_printf_i+0xec>
 8004b5c:	681e      	ldr	r6, [r3, #0]
 8004b5e:	e002      	b.n	8004b66 <_printf_i+0xf2>
 8004b60:	0646      	lsls	r6, r0, #25
 8004b62:	d5fb      	bpl.n	8004b5c <_printf_i+0xe8>
 8004b64:	881e      	ldrh	r6, [r3, #0]
 8004b66:	4854      	ldr	r0, [pc, #336]	; (8004cb8 <_printf_i+0x244>)
 8004b68:	2f6f      	cmp	r7, #111	; 0x6f
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2308      	moveq	r3, #8
 8004b6e:	230a      	movne	r3, #10
 8004b70:	2100      	movs	r1, #0
 8004b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b76:	6865      	ldr	r5, [r4, #4]
 8004b78:	60a5      	str	r5, [r4, #8]
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	bfa2      	ittt	ge
 8004b7e:	6821      	ldrge	r1, [r4, #0]
 8004b80:	f021 0104 	bicge.w	r1, r1, #4
 8004b84:	6021      	strge	r1, [r4, #0]
 8004b86:	b90e      	cbnz	r6, 8004b8c <_printf_i+0x118>
 8004b88:	2d00      	cmp	r5, #0
 8004b8a:	d04d      	beq.n	8004c28 <_printf_i+0x1b4>
 8004b8c:	4615      	mov	r5, r2
 8004b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b92:	fb03 6711 	mls	r7, r3, r1, r6
 8004b96:	5dc7      	ldrb	r7, [r0, r7]
 8004b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b9c:	4637      	mov	r7, r6
 8004b9e:	42bb      	cmp	r3, r7
 8004ba0:	460e      	mov	r6, r1
 8004ba2:	d9f4      	bls.n	8004b8e <_printf_i+0x11a>
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d10b      	bne.n	8004bc0 <_printf_i+0x14c>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	07de      	lsls	r6, r3, #31
 8004bac:	d508      	bpl.n	8004bc0 <_printf_i+0x14c>
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	6861      	ldr	r1, [r4, #4]
 8004bb2:	4299      	cmp	r1, r3
 8004bb4:	bfde      	ittt	le
 8004bb6:	2330      	movle	r3, #48	; 0x30
 8004bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bbc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004bc0:	1b52      	subs	r2, r2, r5
 8004bc2:	6122      	str	r2, [r4, #16]
 8004bc4:	f8cd a000 	str.w	sl, [sp]
 8004bc8:	464b      	mov	r3, r9
 8004bca:	aa03      	add	r2, sp, #12
 8004bcc:	4621      	mov	r1, r4
 8004bce:	4640      	mov	r0, r8
 8004bd0:	f7ff fee2 	bl	8004998 <_printf_common>
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d14c      	bne.n	8004c72 <_printf_i+0x1fe>
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bdc:	b004      	add	sp, #16
 8004bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be2:	4835      	ldr	r0, [pc, #212]	; (8004cb8 <_printf_i+0x244>)
 8004be4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004be8:	6829      	ldr	r1, [r5, #0]
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bf0:	6029      	str	r1, [r5, #0]
 8004bf2:	061d      	lsls	r5, r3, #24
 8004bf4:	d514      	bpl.n	8004c20 <_printf_i+0x1ac>
 8004bf6:	07df      	lsls	r7, r3, #31
 8004bf8:	bf44      	itt	mi
 8004bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8004bfe:	6023      	strmi	r3, [r4, #0]
 8004c00:	b91e      	cbnz	r6, 8004c0a <_printf_i+0x196>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	f023 0320 	bic.w	r3, r3, #32
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	e7b0      	b.n	8004b70 <_printf_i+0xfc>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	f043 0320 	orr.w	r3, r3, #32
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	2378      	movs	r3, #120	; 0x78
 8004c18:	4828      	ldr	r0, [pc, #160]	; (8004cbc <_printf_i+0x248>)
 8004c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c1e:	e7e3      	b.n	8004be8 <_printf_i+0x174>
 8004c20:	0659      	lsls	r1, r3, #25
 8004c22:	bf48      	it	mi
 8004c24:	b2b6      	uxthmi	r6, r6
 8004c26:	e7e6      	b.n	8004bf6 <_printf_i+0x182>
 8004c28:	4615      	mov	r5, r2
 8004c2a:	e7bb      	b.n	8004ba4 <_printf_i+0x130>
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	6826      	ldr	r6, [r4, #0]
 8004c30:	6961      	ldr	r1, [r4, #20]
 8004c32:	1d18      	adds	r0, r3, #4
 8004c34:	6028      	str	r0, [r5, #0]
 8004c36:	0635      	lsls	r5, r6, #24
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	d501      	bpl.n	8004c40 <_printf_i+0x1cc>
 8004c3c:	6019      	str	r1, [r3, #0]
 8004c3e:	e002      	b.n	8004c46 <_printf_i+0x1d2>
 8004c40:	0670      	lsls	r0, r6, #25
 8004c42:	d5fb      	bpl.n	8004c3c <_printf_i+0x1c8>
 8004c44:	8019      	strh	r1, [r3, #0]
 8004c46:	2300      	movs	r3, #0
 8004c48:	6123      	str	r3, [r4, #16]
 8004c4a:	4615      	mov	r5, r2
 8004c4c:	e7ba      	b.n	8004bc4 <_printf_i+0x150>
 8004c4e:	682b      	ldr	r3, [r5, #0]
 8004c50:	1d1a      	adds	r2, r3, #4
 8004c52:	602a      	str	r2, [r5, #0]
 8004c54:	681d      	ldr	r5, [r3, #0]
 8004c56:	6862      	ldr	r2, [r4, #4]
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f7fb fac8 	bl	80001f0 <memchr>
 8004c60:	b108      	cbz	r0, 8004c66 <_printf_i+0x1f2>
 8004c62:	1b40      	subs	r0, r0, r5
 8004c64:	6060      	str	r0, [r4, #4]
 8004c66:	6863      	ldr	r3, [r4, #4]
 8004c68:	6123      	str	r3, [r4, #16]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c70:	e7a8      	b.n	8004bc4 <_printf_i+0x150>
 8004c72:	6923      	ldr	r3, [r4, #16]
 8004c74:	462a      	mov	r2, r5
 8004c76:	4649      	mov	r1, r9
 8004c78:	4640      	mov	r0, r8
 8004c7a:	47d0      	blx	sl
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d0ab      	beq.n	8004bd8 <_printf_i+0x164>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	079b      	lsls	r3, r3, #30
 8004c84:	d413      	bmi.n	8004cae <_printf_i+0x23a>
 8004c86:	68e0      	ldr	r0, [r4, #12]
 8004c88:	9b03      	ldr	r3, [sp, #12]
 8004c8a:	4298      	cmp	r0, r3
 8004c8c:	bfb8      	it	lt
 8004c8e:	4618      	movlt	r0, r3
 8004c90:	e7a4      	b.n	8004bdc <_printf_i+0x168>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4632      	mov	r2, r6
 8004c96:	4649      	mov	r1, r9
 8004c98:	4640      	mov	r0, r8
 8004c9a:	47d0      	blx	sl
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d09b      	beq.n	8004bd8 <_printf_i+0x164>
 8004ca0:	3501      	adds	r5, #1
 8004ca2:	68e3      	ldr	r3, [r4, #12]
 8004ca4:	9903      	ldr	r1, [sp, #12]
 8004ca6:	1a5b      	subs	r3, r3, r1
 8004ca8:	42ab      	cmp	r3, r5
 8004caa:	dcf2      	bgt.n	8004c92 <_printf_i+0x21e>
 8004cac:	e7eb      	b.n	8004c86 <_printf_i+0x212>
 8004cae:	2500      	movs	r5, #0
 8004cb0:	f104 0619 	add.w	r6, r4, #25
 8004cb4:	e7f5      	b.n	8004ca2 <_printf_i+0x22e>
 8004cb6:	bf00      	nop
 8004cb8:	0800500d 	.word	0x0800500d
 8004cbc:	0800501e 	.word	0x0800501e

08004cc0 <memcpy>:
 8004cc0:	440a      	add	r2, r1
 8004cc2:	4291      	cmp	r1, r2
 8004cc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004cc8:	d100      	bne.n	8004ccc <memcpy+0xc>
 8004cca:	4770      	bx	lr
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd6:	4291      	cmp	r1, r2
 8004cd8:	d1f9      	bne.n	8004cce <memcpy+0xe>
 8004cda:	bd10      	pop	{r4, pc}

08004cdc <memmove>:
 8004cdc:	4288      	cmp	r0, r1
 8004cde:	b510      	push	{r4, lr}
 8004ce0:	eb01 0402 	add.w	r4, r1, r2
 8004ce4:	d902      	bls.n	8004cec <memmove+0x10>
 8004ce6:	4284      	cmp	r4, r0
 8004ce8:	4623      	mov	r3, r4
 8004cea:	d807      	bhi.n	8004cfc <memmove+0x20>
 8004cec:	1e43      	subs	r3, r0, #1
 8004cee:	42a1      	cmp	r1, r4
 8004cf0:	d008      	beq.n	8004d04 <memmove+0x28>
 8004cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cfa:	e7f8      	b.n	8004cee <memmove+0x12>
 8004cfc:	4402      	add	r2, r0
 8004cfe:	4601      	mov	r1, r0
 8004d00:	428a      	cmp	r2, r1
 8004d02:	d100      	bne.n	8004d06 <memmove+0x2a>
 8004d04:	bd10      	pop	{r4, pc}
 8004d06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d0e:	e7f7      	b.n	8004d00 <memmove+0x24>

08004d10 <_free_r>:
 8004d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d12:	2900      	cmp	r1, #0
 8004d14:	d044      	beq.n	8004da0 <_free_r+0x90>
 8004d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d1a:	9001      	str	r0, [sp, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d22:	bfb8      	it	lt
 8004d24:	18e4      	addlt	r4, r4, r3
 8004d26:	f000 f913 	bl	8004f50 <__malloc_lock>
 8004d2a:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <_free_r+0x94>)
 8004d2c:	9801      	ldr	r0, [sp, #4]
 8004d2e:	6813      	ldr	r3, [r2, #0]
 8004d30:	b933      	cbnz	r3, 8004d40 <_free_r+0x30>
 8004d32:	6063      	str	r3, [r4, #4]
 8004d34:	6014      	str	r4, [r2, #0]
 8004d36:	b003      	add	sp, #12
 8004d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d3c:	f000 b90e 	b.w	8004f5c <__malloc_unlock>
 8004d40:	42a3      	cmp	r3, r4
 8004d42:	d908      	bls.n	8004d56 <_free_r+0x46>
 8004d44:	6825      	ldr	r5, [r4, #0]
 8004d46:	1961      	adds	r1, r4, r5
 8004d48:	428b      	cmp	r3, r1
 8004d4a:	bf01      	itttt	eq
 8004d4c:	6819      	ldreq	r1, [r3, #0]
 8004d4e:	685b      	ldreq	r3, [r3, #4]
 8004d50:	1949      	addeq	r1, r1, r5
 8004d52:	6021      	streq	r1, [r4, #0]
 8004d54:	e7ed      	b.n	8004d32 <_free_r+0x22>
 8004d56:	461a      	mov	r2, r3
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	b10b      	cbz	r3, 8004d60 <_free_r+0x50>
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	d9fa      	bls.n	8004d56 <_free_r+0x46>
 8004d60:	6811      	ldr	r1, [r2, #0]
 8004d62:	1855      	adds	r5, r2, r1
 8004d64:	42a5      	cmp	r5, r4
 8004d66:	d10b      	bne.n	8004d80 <_free_r+0x70>
 8004d68:	6824      	ldr	r4, [r4, #0]
 8004d6a:	4421      	add	r1, r4
 8004d6c:	1854      	adds	r4, r2, r1
 8004d6e:	42a3      	cmp	r3, r4
 8004d70:	6011      	str	r1, [r2, #0]
 8004d72:	d1e0      	bne.n	8004d36 <_free_r+0x26>
 8004d74:	681c      	ldr	r4, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	6053      	str	r3, [r2, #4]
 8004d7a:	4421      	add	r1, r4
 8004d7c:	6011      	str	r1, [r2, #0]
 8004d7e:	e7da      	b.n	8004d36 <_free_r+0x26>
 8004d80:	d902      	bls.n	8004d88 <_free_r+0x78>
 8004d82:	230c      	movs	r3, #12
 8004d84:	6003      	str	r3, [r0, #0]
 8004d86:	e7d6      	b.n	8004d36 <_free_r+0x26>
 8004d88:	6825      	ldr	r5, [r4, #0]
 8004d8a:	1961      	adds	r1, r4, r5
 8004d8c:	428b      	cmp	r3, r1
 8004d8e:	bf04      	itt	eq
 8004d90:	6819      	ldreq	r1, [r3, #0]
 8004d92:	685b      	ldreq	r3, [r3, #4]
 8004d94:	6063      	str	r3, [r4, #4]
 8004d96:	bf04      	itt	eq
 8004d98:	1949      	addeq	r1, r1, r5
 8004d9a:	6021      	streq	r1, [r4, #0]
 8004d9c:	6054      	str	r4, [r2, #4]
 8004d9e:	e7ca      	b.n	8004d36 <_free_r+0x26>
 8004da0:	b003      	add	sp, #12
 8004da2:	bd30      	pop	{r4, r5, pc}
 8004da4:	2000012c 	.word	0x2000012c

08004da8 <sbrk_aligned>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	4e0e      	ldr	r6, [pc, #56]	; (8004de4 <sbrk_aligned+0x3c>)
 8004dac:	460c      	mov	r4, r1
 8004dae:	6831      	ldr	r1, [r6, #0]
 8004db0:	4605      	mov	r5, r0
 8004db2:	b911      	cbnz	r1, 8004dba <sbrk_aligned+0x12>
 8004db4:	f000 f8bc 	bl	8004f30 <_sbrk_r>
 8004db8:	6030      	str	r0, [r6, #0]
 8004dba:	4621      	mov	r1, r4
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f000 f8b7 	bl	8004f30 <_sbrk_r>
 8004dc2:	1c43      	adds	r3, r0, #1
 8004dc4:	d00a      	beq.n	8004ddc <sbrk_aligned+0x34>
 8004dc6:	1cc4      	adds	r4, r0, #3
 8004dc8:	f024 0403 	bic.w	r4, r4, #3
 8004dcc:	42a0      	cmp	r0, r4
 8004dce:	d007      	beq.n	8004de0 <sbrk_aligned+0x38>
 8004dd0:	1a21      	subs	r1, r4, r0
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f000 f8ac 	bl	8004f30 <_sbrk_r>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d101      	bne.n	8004de0 <sbrk_aligned+0x38>
 8004ddc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004de0:	4620      	mov	r0, r4
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	20000130 	.word	0x20000130

08004de8 <_malloc_r>:
 8004de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dec:	1ccd      	adds	r5, r1, #3
 8004dee:	f025 0503 	bic.w	r5, r5, #3
 8004df2:	3508      	adds	r5, #8
 8004df4:	2d0c      	cmp	r5, #12
 8004df6:	bf38      	it	cc
 8004df8:	250c      	movcc	r5, #12
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	db01      	blt.n	8004e04 <_malloc_r+0x1c>
 8004e00:	42a9      	cmp	r1, r5
 8004e02:	d905      	bls.n	8004e10 <_malloc_r+0x28>
 8004e04:	230c      	movs	r3, #12
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	2600      	movs	r6, #0
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e10:	4e2e      	ldr	r6, [pc, #184]	; (8004ecc <_malloc_r+0xe4>)
 8004e12:	f000 f89d 	bl	8004f50 <__malloc_lock>
 8004e16:	6833      	ldr	r3, [r6, #0]
 8004e18:	461c      	mov	r4, r3
 8004e1a:	bb34      	cbnz	r4, 8004e6a <_malloc_r+0x82>
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4638      	mov	r0, r7
 8004e20:	f7ff ffc2 	bl	8004da8 <sbrk_aligned>
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	4604      	mov	r4, r0
 8004e28:	d14d      	bne.n	8004ec6 <_malloc_r+0xde>
 8004e2a:	6834      	ldr	r4, [r6, #0]
 8004e2c:	4626      	mov	r6, r4
 8004e2e:	2e00      	cmp	r6, #0
 8004e30:	d140      	bne.n	8004eb4 <_malloc_r+0xcc>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	4631      	mov	r1, r6
 8004e36:	4638      	mov	r0, r7
 8004e38:	eb04 0803 	add.w	r8, r4, r3
 8004e3c:	f000 f878 	bl	8004f30 <_sbrk_r>
 8004e40:	4580      	cmp	r8, r0
 8004e42:	d13a      	bne.n	8004eba <_malloc_r+0xd2>
 8004e44:	6821      	ldr	r1, [r4, #0]
 8004e46:	3503      	adds	r5, #3
 8004e48:	1a6d      	subs	r5, r5, r1
 8004e4a:	f025 0503 	bic.w	r5, r5, #3
 8004e4e:	3508      	adds	r5, #8
 8004e50:	2d0c      	cmp	r5, #12
 8004e52:	bf38      	it	cc
 8004e54:	250c      	movcc	r5, #12
 8004e56:	4629      	mov	r1, r5
 8004e58:	4638      	mov	r0, r7
 8004e5a:	f7ff ffa5 	bl	8004da8 <sbrk_aligned>
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d02b      	beq.n	8004eba <_malloc_r+0xd2>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	442b      	add	r3, r5
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	e00e      	b.n	8004e88 <_malloc_r+0xa0>
 8004e6a:	6822      	ldr	r2, [r4, #0]
 8004e6c:	1b52      	subs	r2, r2, r5
 8004e6e:	d41e      	bmi.n	8004eae <_malloc_r+0xc6>
 8004e70:	2a0b      	cmp	r2, #11
 8004e72:	d916      	bls.n	8004ea2 <_malloc_r+0xba>
 8004e74:	1961      	adds	r1, r4, r5
 8004e76:	42a3      	cmp	r3, r4
 8004e78:	6025      	str	r5, [r4, #0]
 8004e7a:	bf18      	it	ne
 8004e7c:	6059      	strne	r1, [r3, #4]
 8004e7e:	6863      	ldr	r3, [r4, #4]
 8004e80:	bf08      	it	eq
 8004e82:	6031      	streq	r1, [r6, #0]
 8004e84:	5162      	str	r2, [r4, r5]
 8004e86:	604b      	str	r3, [r1, #4]
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f104 060b 	add.w	r6, r4, #11
 8004e8e:	f000 f865 	bl	8004f5c <__malloc_unlock>
 8004e92:	f026 0607 	bic.w	r6, r6, #7
 8004e96:	1d23      	adds	r3, r4, #4
 8004e98:	1af2      	subs	r2, r6, r3
 8004e9a:	d0b6      	beq.n	8004e0a <_malloc_r+0x22>
 8004e9c:	1b9b      	subs	r3, r3, r6
 8004e9e:	50a3      	str	r3, [r4, r2]
 8004ea0:	e7b3      	b.n	8004e0a <_malloc_r+0x22>
 8004ea2:	6862      	ldr	r2, [r4, #4]
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	bf0c      	ite	eq
 8004ea8:	6032      	streq	r2, [r6, #0]
 8004eaa:	605a      	strne	r2, [r3, #4]
 8004eac:	e7ec      	b.n	8004e88 <_malloc_r+0xa0>
 8004eae:	4623      	mov	r3, r4
 8004eb0:	6864      	ldr	r4, [r4, #4]
 8004eb2:	e7b2      	b.n	8004e1a <_malloc_r+0x32>
 8004eb4:	4634      	mov	r4, r6
 8004eb6:	6876      	ldr	r6, [r6, #4]
 8004eb8:	e7b9      	b.n	8004e2e <_malloc_r+0x46>
 8004eba:	230c      	movs	r3, #12
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	f000 f84c 	bl	8004f5c <__malloc_unlock>
 8004ec4:	e7a1      	b.n	8004e0a <_malloc_r+0x22>
 8004ec6:	6025      	str	r5, [r4, #0]
 8004ec8:	e7de      	b.n	8004e88 <_malloc_r+0xa0>
 8004eca:	bf00      	nop
 8004ecc:	2000012c 	.word	0x2000012c

08004ed0 <_realloc_r>:
 8004ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	4614      	mov	r4, r2
 8004ed8:	460e      	mov	r6, r1
 8004eda:	b921      	cbnz	r1, 8004ee6 <_realloc_r+0x16>
 8004edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	f7ff bf81 	b.w	8004de8 <_malloc_r>
 8004ee6:	b92a      	cbnz	r2, 8004ef4 <_realloc_r+0x24>
 8004ee8:	f7ff ff12 	bl	8004d10 <_free_r>
 8004eec:	4625      	mov	r5, r4
 8004eee:	4628      	mov	r0, r5
 8004ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef4:	f000 f838 	bl	8004f68 <_malloc_usable_size_r>
 8004ef8:	4284      	cmp	r4, r0
 8004efa:	4607      	mov	r7, r0
 8004efc:	d802      	bhi.n	8004f04 <_realloc_r+0x34>
 8004efe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f02:	d812      	bhi.n	8004f2a <_realloc_r+0x5a>
 8004f04:	4621      	mov	r1, r4
 8004f06:	4640      	mov	r0, r8
 8004f08:	f7ff ff6e 	bl	8004de8 <_malloc_r>
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d0ed      	beq.n	8004eee <_realloc_r+0x1e>
 8004f12:	42bc      	cmp	r4, r7
 8004f14:	4622      	mov	r2, r4
 8004f16:	4631      	mov	r1, r6
 8004f18:	bf28      	it	cs
 8004f1a:	463a      	movcs	r2, r7
 8004f1c:	f7ff fed0 	bl	8004cc0 <memcpy>
 8004f20:	4631      	mov	r1, r6
 8004f22:	4640      	mov	r0, r8
 8004f24:	f7ff fef4 	bl	8004d10 <_free_r>
 8004f28:	e7e1      	b.n	8004eee <_realloc_r+0x1e>
 8004f2a:	4635      	mov	r5, r6
 8004f2c:	e7df      	b.n	8004eee <_realloc_r+0x1e>
	...

08004f30 <_sbrk_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4d06      	ldr	r5, [pc, #24]	; (8004f4c <_sbrk_r+0x1c>)
 8004f34:	2300      	movs	r3, #0
 8004f36:	4604      	mov	r4, r0
 8004f38:	4608      	mov	r0, r1
 8004f3a:	602b      	str	r3, [r5, #0]
 8004f3c:	f7fc fa98 	bl	8001470 <_sbrk>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_sbrk_r+0x1a>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_sbrk_r+0x1a>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	20000134 	.word	0x20000134

08004f50 <__malloc_lock>:
 8004f50:	4801      	ldr	r0, [pc, #4]	; (8004f58 <__malloc_lock+0x8>)
 8004f52:	f000 b811 	b.w	8004f78 <__retarget_lock_acquire_recursive>
 8004f56:	bf00      	nop
 8004f58:	20000138 	.word	0x20000138

08004f5c <__malloc_unlock>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	; (8004f64 <__malloc_unlock+0x8>)
 8004f5e:	f000 b80c 	b.w	8004f7a <__retarget_lock_release_recursive>
 8004f62:	bf00      	nop
 8004f64:	20000138 	.word	0x20000138

08004f68 <_malloc_usable_size_r>:
 8004f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6c:	1f18      	subs	r0, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfbc      	itt	lt
 8004f72:	580b      	ldrlt	r3, [r1, r0]
 8004f74:	18c0      	addlt	r0, r0, r3
 8004f76:	4770      	bx	lr

08004f78 <__retarget_lock_acquire_recursive>:
 8004f78:	4770      	bx	lr

08004f7a <__retarget_lock_release_recursive>:
 8004f7a:	4770      	bx	lr

08004f7c <_init>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr

08004f88 <_fini>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr
